////////////////////////////////////////////////////////////////////////////////
// МОДУЛЬ ФОРМЫ ОБРАБОТКИ "ТМС_ТЕСТИРОВАНИЕМОКСЕРВИСА"
//
// Модуль предназначен для тестирования взаимодействия с mock-сервисом интеграции.
// Содержит функциональность для создания тестовых приложений, отправки сообщений
// и мониторинга результатов интеграционного взаимодействия.
//
// Copyright (c) 2025 rzateev
// 
// Этот файл является частью проекта 1cServiceIntegrationMock,
// распространяемого под лицензией MIT.
// Подробности см. в файле LICENSE в корне проекта.
//
////////////////////////////////////////////////////////////////////////////////


#Область ОбработчикиСобытийФормы

// Обрабатывает событие создания формы на сервере.
// Выполняет инициализацию формы, чтение сохраненных настроек,
// заполнение списков выбора сервисов интеграции.
//
// Параметры:
//  Отказ - Булево - Признак отказа от создания формы
//  СтандартнаяОбработка - Булево - Признак выполнения стандартной обработки
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Чтение сохраненных настроек 
	ПрочитатьНастройкиИзХранилища();
	
	// Инициализация для старого механизма
	СервисИнтеграции = Метаданные.СервисыИнтеграции.ТМС_mockService;
	ТестовыйСервисИнтеграции = СервисИнтеграции.Имя;
	
	// Инициализация для нового механизма
	Для Каждого СИ Из Метаданные.СервисыИнтеграции Цикл
		Элементы.ВыбранныйСервисИнтеграции.СписокВыбора.Добавить(СИ.Имя, СИ.Имя);
		Элементы.СервисИнтеграцииДляОтправки.СписокВыбора.Добавить(СИ.Имя, СИ.Имя);
	КонецЦикла;
	
	Если Элементы.СервисИнтеграцииДляОтправки.СписокВыбора.Количество() > 0 Тогда
		СервисИнтеграцииДляОтправки = Элементы.СервисИнтеграцииДляОтправки.СписокВыбора[0].Значение;
		СервисИнтеграцииДляНастройки = СервисИнтеграцииДляОтправки;
	КонецЕсли;
	
	ЗаполнитьСписокВыбораКаналовДляОтправки(СервисИнтеграцииДляОтправки);
	
	ИмяПриложенияВМокСервисе = "MyApplication";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Обрабатывает изменение выбранного сервиса интеграции для отправки.
// Обновляет список доступных каналов для выбранного сервиса.
//
// Параметры:
//  Элемент - ПолеФормы - Элемент формы, в котором произошло изменение
//
&НаКлиенте
Процедура СервисИнтеграцииДляОтправкиПриИзменении(Элемент)
	СервисИнтеграцииДляОтправкиПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Выполняет отправку сообщений через сервис интеграции.
// Проверяет доступность сервиса, отправляет указанное количество сообщений
// и фиксирует время выполнения операций.
//
// Параметры:
//  Команда - КомандаФормы - Команда, вызвавшая процедуру
//
&НаКлиенте
Процедура ОтправитьСообщения(Команда)
	
	СтруктураПроверки = ПроверитьДоступностьСервиса(СервисИнтеграцииДляОтправки);
	ЕстьОшибка = СтруктураПроверки.ЕстьОшибка;
	ТекстОшибки = СтруктураПроверки.ТекстОшибки;
	
	Если НЕ ЕстьОшибка Тогда
		ВремяНачалаГенерацииСообщений = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОтправитьСообщенияСКонтролемГенерацииСообщений();
		ВремяОкончанияГенерацииСообщений = ТекущаяУниверсальнаяДатаВМиллисекундах();
	КонецЕсли;
	
	Элементы.ТекстОшибки.Видимость = ЕстьОшибка;
	
КонецПроцедуры

// Запускает обработку сообщений в фоновых заданиях.
// Управляет процессом обработки сообщений и мониторингом их получения.
//
// Параметры:
//  Команда - КомандаФормы - Команда, вызвавшая процедуру
//
&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	
	ОтключитьОбработчикОжидания("ПроверитьПолучениеВсехСообщений");
	
	Если ПроверятьПолучениеСообщений Тогда
		// Для корректного замера времени нужно завершить фоновые задания
		ОстановитьОбработкуНаСервере(); // Останавливаются технические фоновые задания
		ВремяНачалаРаботыФоновыхЗаданий = 0;
	КонецЕсли;
	
	ВыполнитьОбработкуНаСервере(); // Запускаются технические фоновые задания
	
	Если ПроверятьПолучениеСообщений Тогда
		// Периодически проверяем входящую очередь на получение отправленного
		// количества сообщений текущей группы
		ПодключитьОбработчикОжидания("ПроверитьПолучениеВсехСообщений", 2);
		ДобавитьСтрокуВПротоколТестирования(СтатистикаОтправкиИПолучения, 
			"Подключен обработчик ожидания получения всех сообщений", Истина);
	КонецЕсли;
	
КонецПроцедуры

// Останавливает обработку сообщений в фоновых заданиях.
// Сбрасывает состояние процесса тестирования.
//
// Параметры:
//  Команда - КомандаФормы - Команда, вызвавшая процедуру
//
&НаКлиенте
Процедура ОстановитьОбработку(Команда)
	
	ОстановитьОбработкуНаСервере();
	ИдентификаторГруппы = Неопределено;
	ОтключитьОбработчикОжидания("ПроверитьПолучениеВсехСообщений");
	
КонецПроцедуры

// Создает тестовое приложение в mock-сервисе.
// Вызывает серверную процедуру создания приложения с базовыми настройками.
//
// Параметры:
//  Команда - КомандаФормы - Команда, вызвавшая процедуру
//
&НаКлиенте
Процедура СоздатьТестовоеПриложение(Команда)
	СоздатьТестовоеПриложениеНаСервере();
КонецПроцедуры

// Настраивает параметры сервиса интеграции.
// Применяет настройки созданного тестового приложения к сервису интеграции.
//
// Параметры:
//  Команда - КомандаФормы - Команда, вызвавшая процедуру
//
&НаКлиенте
Процедура НастроитьСервисИнтеграции(Команда)
	НастроитьТестовыйСервисИнтеграцииНаСервере();
КонецПроцедуры

// Создает приложение и каналы на основе метаданных 1С.
// Анализирует метаданные выбранного сервиса интеграции и создает
// соответствующую структуру в mock-сервисе.
//
// Параметры:
//  Команда - КомандаФормы - Команда, вызвавшая процедуру
//
&НаКлиенте
Процедура СоздатьПоМетаданным(Команда)
	СоздатьПоМетаданнымНаСервере();
КонецПроцедуры

// Перечитывает настройки сервиса интеграции из хранилища.
// Обновляет значения полей формы актуальными настройками.
//
// Параметры:
//  Команда - КомандаФормы - Команда, вызвавшая процедуру
//
&НаКлиенте
Процедура ПеречитатьНастройкиСервисаИнтеграции(Команда)
	ПрочитатьНастройкиИзХранилища();
КонецПроцедуры

// Сохраняет настройки сервиса интеграции в хранилище.
// Записывает текущие значения полей формы в константу.
//
// Параметры:
//  Команда - КомандаФормы - Команда, вызвавшая процедуру
//
&НаКлиенте
Процедура СохранитьНастройкиСервисаИнтеграции(Команда)
	СохранитьНастройкиСервисаИнтеграцииНаСервере();
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроверкаСостоянияСервиса

// Проверяет доступность указанного сервиса интеграции.
// Проверяет активность сервиса и возвращает результат проверки.
//
// Параметры:
//  Сервис - Строка - Имя сервиса интеграции для проверки
//
// Возвращаемое значение:
//  Структура - Результат проверки:
//   * ЕстьОшибка - Булево - Признак наличия ошибки
//   * ТекстОшибки - Строка - Текст ошибки, если есть
//
&НаСервереБезКонтекста
Функция ПроверитьДоступностьСервиса(Знач Сервис)
	
	Результат = Новый Структура("ЕстьОшибка, ТекстОшибки", Ложь, "");
	
	ПривилегированныйРежимУстановлен = Ложь;
	Если НЕ ПривилегированныйРежим() Тогда
		ПривилегированныйРежимУстановлен = Истина;
		// BSLLS:SetPrivilegedMode-off
		УстановитьПривилегированныйРежим(ПривилегированныйРежимУстановлен);
		// BSLLS:SetPrivilegedMode-on
	КонецЕсли;
	
	Попытка
		АктивностьСервиса = СервисыИнтеграции[Сервис].ПолучитьАктивность();
		Если НЕ АктивностьСервиса Тогда
			Результат.ЕстьОшибка = Истина;
			ТекстОшибки = НСтр("ru = 'Сервис интеграции %1 неактивен'");
			Результат.ТекстОшибки = СтрШаблон(ТекстОшибки, Сервис);
		КонецЕсли;
	Исключение
		Результат.ЕстьОшибка = Истина;
		Результат.ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если ПривилегированныйРежимУстановлен Тогда
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОтправкаСообщений

// Запускает асинхронную отправку сообщений для веб-клиента.
// При большом количестве сообщений выполняет отправку в фоновом задании.
//
&НаКлиенте
Процедура ОтправитьСообщенияСКонтролемГенерацииСообщений()
	
	// Для веб-клиента и большого количества сообщений используем асинхронный режим
	Если Объект.КоличествоСообщений > 100 Тогда
		ЗапуститьАсинхроннуюОтправкуСообщений();
	Иначе
		// Для тонкого клиента или небольшого количества сообщений - синхронно
		ОтправитьСообщенияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

// Запускает фоновое задание для асинхронной отправки сообщений.
// Обеспечивает корректную работу в веб-клиенте при большом объеме данных.
//
&НаКлиенте
Процедура ЗапуститьАсинхроннуюОтправкуСообщений()
	
	// Генерируем идентификатор группы сообщений
	//@skip-check undefined-function
	ИдентификаторГруппы = XMLСтрока(Новый УникальныйИдентификатор);
	
	РезультатЗапуска = ЗапуститьФоновоеЗаданиеОтправкиНаСервере(ИдентификаторГруппы, 
		СервисИнтеграцииДляОтправки, КаналДляОтправки);
	
	Если РезультатЗапуска.Успех Тогда
		ИдентификаторЗадания = РезультатЗапуска.ИдентификаторЗадания;
		АдресХранилища = РезультатЗапуска.АдресХранилища;
		
		// Запускаем таймер для отслеживания прогресса
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания", 1);
		
		ДобавитьСтрокуВПротоколТестирования(СтатистикаОтправкиИПолучения, 
			"Запущено фоновое задание для асинхронной отправки сообщений...", Истина);
	Иначе
		ТМС_ОбщегоНазначенияКлиентСервер.СообщениеПользователю(
			"Ошибка запуска фонового задания: " + РезультатЗапуска.ОписаниеОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет состояние выполнения фонового задания.
// Вызывается таймером для отслеживания прогресса выполнения.
//
&НаКлиенте
Процедура ПроверитьВыполнениеФоновогоЗадания()
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания");
		Возврат;
	КонецЕсли;
	
	СостояниеЗадания = ПолучитьСостояниеФоновогоЗаданияНаСервере(ИдентификаторЗадания, АдресХранилища);
	
	Если СостояниеЗадания.Завершено Тогда
		ОтключитьОбработчикОжидания("ПроверитьВыполнениеФоновогоЗадания");
		
		Если СостояниеЗадания.Успех Тогда
			ДобавитьСтрокуВПротоколТестирования(СтатистикаОтправкиИПолучения, 
				СтрШаблон("Асинхронная отправка завершена. Отправлено %1 из %2 сообщений", 
					СостояниеЗадания.КоличествоОтправленных, Объект.КоличествоСообщений), Истина);
		Иначе
			ДобавитьСтрокуВПротоколТестирования(СтатистикаОтправкиИПолучения, 
				"Ошибка при асинхронной отправке: " + СостояниеЗадания.ОписаниеОшибки, Истина);
		КонецЕсли;
		
		ИдентификаторЗадания = Неопределено;
		АдресХранилища = Неопределено;
		
	ИначеЕсли СостояниеЗадания.ЕстьПрогресс Тогда
		// Обновляем информацию о прогрессе
		ТекстПрогресса = СтрШаблон("Отправлено %1 из %2 сообщений (%3%)", 
			СостояниеЗадания.КоличествоОтправленных, 
			Объект.КоличествоСообщений,
			Окр(СостояниеЗадания.КоличествоОтправленных / Объект.КоличествоСообщений * 100, 0));
		Элементы.ДекорацияПрогресс.Заголовок = ТекстПрогресса;
	// BSLLS:EmptyCodeBlock-off	
	Иначе		
		// Задание еще не завершено и нет промежуточных данных
	// BSLLS:EmptyCodeBlock-on	
	КонецЕсли;
	
КонецПроцедуры

// Запускает фоновое задание для отправки сообщений на сервере.
//
// Параметры:
//  ИдентификаторГруппы - Строка - Идентификатор группы сообщений
//  СервисИнтеграции - Строка - Имя сервиса интеграции для отправки
//  КаналОтправки - Строка - Имя канала для отправки
//
// Возвращаемое значение:
//  Структура - Результат запуска:
//   * Успех - Булево - Признак успешного запуска
//   * ИдентификаторЗадания - УникальныйИдентификатор, Неопределено - Идентификатор фонового задания
//   * АдресХранилища - Строка - Адрес временного хранилища для результата
//   * ОписаниеОшибки - Строка - Описание ошибки при неуспешном запуске
//
&НаСервере
Функция ЗапуститьФоновоеЗаданиеОтправкиНаСервере(Знач ИдентификаторГруппы, Знач СервисИнтеграции, Знач КаналОтправки)
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ИдентификаторЗадания", Неопределено);
	Результат.Вставить("АдресХранилища", "");
	Результат.Вставить("ОписаниеОшибки", "");
	
	Попытка
		// Создаем временное хранилище для обмена данными с фоновым заданием
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		
		// Параметры для передачи в фоновое задание
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("КоличествоСообщений", Объект.КоличествоСообщений);
		ПараметрыЗадания.Вставить("АдресХранилища", АдресХранилища);
		ПараметрыЗадания.Вставить("ИдентификаторГруппы", ИдентификаторГруппы);
		ПараметрыЗадания.Вставить("СервисИнтеграции", СервисИнтеграции);
		ПараметрыЗадания.Вставить("КаналОтправки", КаналОтправки);
		
		// Запускаем фоновое задание (параметры передаются как массив)
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрыЗадания);
		
		ФоновоеЗадание = ФоновыеЗадания.Выполнить(
			"ТМС_ОбщегоНазначенияВызовСервера.ВыполнитьОтправкуСообщенийАсинхронно", 
			МассивПараметров, 
			УникальныйИдентификатор, 
			"Асинхронная отправка сообщений через сервис интеграции");
		
		Результат.Успех = Истина;
		Результат.ИдентификаторЗадания = ФоновоеЗадание.УникальныйИдентификатор;
		Результат.АдресХранилища = АдресХранилища;
		
	Исключение
		Результат.ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Получает состояние выполнения фонового задания.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - Идентификатор фонового задания
//  АдресХранилища - Строка - Адрес временного хранилища с промежуточными результатами
//
// Возвращаемое значение:
//  Структура - Состояние задания:
//   * Завершено - Булево - Признак завершения задания
//   * Успех - Булево - Признак успешного завершения
//   * ЕстьПрогресс - Булево - Есть ли данные о прогрессе
//   * КоличествоОтправленных - Число - Количество уже отправленных сообщений
//   * ОписаниеОшибки - Строка - Описание ошибки при неуспешном завершении
//
&НаСервере
Функция ПолучитьСостояниеФоновогоЗаданияНаСервере(Знач ИдентификаторЗадания, Знач АдресХранилища)
	
	Результат = Новый Структура;
	Результат.Вставить("Завершено", Ложь);
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("ЕстьПрогресс", Ложь);
	Результат.Вставить("КоличествоОтправленных", 0);
	Результат.Вставить("ОписаниеОшибки", "");
	
	Попытка
		ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		
		Если ФоновоеЗадание = Неопределено Тогда
			Результат.Завершено = Истина;
			Результат.ОписаниеОшибки = "Фоновое задание не найдено";
			Возврат Результат;
		КонецЕсли;
		
		// Проверяем промежуточные результаты из временного хранилища
		ПромежуточныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);
		Если ТипЗнч(ПромежуточныеДанные) = Тип("Структура") Тогда
			Результат.ЕстьПрогресс = Истина;
			Результат.КоличествоОтправленных = ПромежуточныеДанные.КоличествоОтправленных;
		КонецЕсли;
		
		// Проверяем состояние задания
		Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
			Результат.Завершено = Истина;
			Результат.Успех = Истина;
			
			// Получаем финальный результат
			ФинальныйРезультат = ПолучитьИзВременногоХранилища(АдресХранилища);
			Если ТипЗнч(ФинальныйРезультат) = Тип("Структура") Тогда
				Результат.КоличествоОтправленных = ФинальныйРезультат.КоличествоОтправленных;
			КонецЕсли;
			
		ИначеЕсли ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			Результат.Завершено = Истина;
			Результат.ОписаниеОшибки = ФоновоеЗадание.ИнформацияОбОшибке.Описание;
		// BSLLS:EmptyCodeBlock-off
		Иначе
			// Задание еще выполняется
		// BSLLS:EmptyCodeBlock-on
		КонецЕсли;
		
	Исключение
		Результат.Завершено = Истина;
		Результат.ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Выполняет отправку сообщений на сервере.
// Создает указанное количество сообщений с уникальными идентификаторами
// и отправляет их через выбранный канал сервиса интеграции.
//
&НаСервере
Процедура ОтправитьСообщенияНаСервере()
	
	Если Объект.КоличествоСообщений <= 0 Тогда
		ВызватьИсключение "Количество сообщений должно быть больше 0";
	КонецЕсли;
	
	КоличествоОтправленных = 0;
	ИдентификаторГруппы = XMLСтрока(Новый УникальныйИдентификатор);
	
	Для Счетчик = 1 По Объект.КоличествоСообщений Цикл
		Попытка
			СлучайноеТело = "Тело сообщения: " + XMLСтрока(Новый УникальныйИдентификатор);
			ОтправитьСообщение(СлучайноеТело, "Тестовое сообщение №" + Счетчик);
			КоличествоОтправленных = КоличествоОтправленных + 1;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = "Ошибка при отправке сообщения №" + Счетчик + ": " 
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ЗаписьЖурналаРегистрации("ОтправкаСообщений", 
				УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
		КонецПопытки;
	КонецЦикла;
	
	ТекстОтчета = СтрШаблон(НСтр("ru = 'Сохранено в очереди IntegChannelOutQueue сообщений: %1 из %2'"), 
		КоличествоОтправленных, Объект.КоличествоСообщений);
	ДобавитьСтрокуВПротоколТестирования(СтатистикаОтправкиИПолучения, ТекстОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФоновымиЗаданиями

// Запускает обработку сообщений в фоновых заданиях.
// Инициирует выполнение обработки сервисами интеграции.
//
&НаСервере
Процедура ВыполнитьОбработкуНаСервере()
	
	СтатистикаОтправкиИПолучения = Новый ФорматированныйДокумент();
	
	ВремяНачалаРаботыФоновыхЗаданий = ТекущаяУниверсальнаяДатаВМиллисекундах();
	СервисыИнтеграции.ВыполнитьОбработку();
	
КонецПроцедуры

// Останавливает обработку сообщений в фоновых заданиях.
// Прекращает выполнение обработки сервисами интеграции.
//
&НаСервере
Процедура ОстановитьОбработкуНаСервере()
	
	СервисыИнтеграции.ОстановитьОбработку();
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПолучениеВсехСообщенийНаСервере()
	
	Если Не ЗначениеЗаполнено(ИдентификаторГруппы) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТМС_ВходящиеСообщения.УниверсальнаяДатаВМиллисекундах КАК УниверсальнаяДатаВМиллисекундах
	|ИЗ
	|	РегистрСведений.ТМС_ВходящиеСообщения КАК ТМС_ВходящиеСообщения
	|ГДЕ
	|	ТМС_ВходящиеСообщения.ИдентификаторГруппы = &ИдентификаторГруппы
	|
	|УПОРЯДОЧИТЬ ПО
	|	УниверсальнаяДатаВМиллисекундах УБЫВ";
	Запрос.УстановитьПараметр("ИдентификаторГруппы", ИдентификаторГруппы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ПолученоСообщений = Выборка.Количество();
	
	ДобавитьЗначениеВПротокол(СтатистикаОтправкиИПолучения, "Получено сообщений", ПолученоСообщений);

	
	Если ПолученоСообщений >= Объект.КоличествоСообщений Тогда
		Выборка.Следующий();
		РазницаМиллисекунд = ТМС_ОбщегоНазначенияВызовСервера.РазницаМиллисекундВСекундах(
			ВремяНачалаРаботыФоновыхЗаданий, Выборка.УниверсальнаяДатаВМиллисекундах);
		ТекстСообщения = СтрШаблон("Начало работы фоновых заданий: %1. Получено последнее сообщение: %2. Разница (мс): %3",
			ВремяНачалаРаботыФоновыхЗаданий, 
			Выборка.УниверсальнаяДатаВМиллисекундах,
			РазницаМиллисекунд);
		ДобавитьСтрокуВПротоколТестирования(СтатистикаОтправкиИПолучения, ТекстСообщения);
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


&НаСервере
Функция РассчитатьСтатистикуОтправкиПолученияСообщений()
	
	СтруктураРезультата = Новый Структура;
	// Начало сохранения в техническую очередь OutboxTable
	СтруктураРезультата.Вставить("ВремяНачалаГенерацииСообщений", "");
	// Окончание сохранения в техническую очередь OutboxTable
	СтруктураРезультата.Вставить("ВремяОкончанияГенерацииСообщений", "");	
	СтруктураРезультата.Вставить("ВремяНачалаРаботыФоновыхЗаданий", "");	
	СтруктураРезультата.Вставить("ВремяПолученияПервогоСообщения", "");
	СтруктураРезультата.Вставить("ВремяПолученияПоследнегоСообщения", "");
	СтруктураРезультата.Вставить("ОбщееВремяЗаписиСообщенийВОчередь", "");
	СтруктураРезультата.Вставить("ОбщееВремяПолученияСообщенийВРегистр", "");
	СтруктураРезультата.Вставить("ВремяМеждуНачаломОтправкиИПолучениемПервогоСообщения", "");
	
	СтруктураРезультата.Вставить("Успешно", Ложь);
	
	
	
	Если Не ЗначениеЗаполнено(ИдентификаторГруппы) Тогда
		Возврат СтруктураРезультата;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТМС_ВходящиеСообщения.УниверсальнаяДатаВМиллисекундах КАК ВремяПолученияПервогоСообщения
	|ПОМЕСТИТЬ ВТ_ПервоеСообщение
	|ИЗ
	|	РегистрСведений.ТМС_ВходящиеСообщения КАК ТМС_ВходящиеСообщения
	|ГДЕ
	|	ТМС_ВходящиеСообщения.ИдентификаторГруппы = &ИдентификаторГруппы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяПолученияПервогоСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТМС_ВходящиеСообщения.УниверсальнаяДатаВМиллисекундах КАК ВремяПолученияПоследнегоСообщения
	|ПОМЕСТИТЬ ВТ_ПоследнееСообщение
	|ИЗ
	|	РегистрСведений.ТМС_ВходящиеСообщения КАК ТМС_ВходящиеСообщения
	|ГДЕ
	|	ТМС_ВходящиеСообщения.ИдентификаторГруппы = &ИдентификаторГруппы
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВремяПолученияПоследнегоСообщения УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПервоеСообщение.ВремяПолученияПервогоСообщения КАК ВремяПолученияПервогоСообщения,
	|	ВТ_ПоследнееСообщение.ВремяПолученияПоследнегоСообщения КАК ВремяПолученияПоследнегоСообщения
	|ИЗ
	|	ВТ_ПервоеСообщение КАК ВТ_ПервоеСообщение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПоследнееСообщение КАК ВТ_ПоследнееСообщение
	|		ПО (ИСТИНА)";
	Запрос.УстановитьПараметр("ИдентификаторГруппы", ИдентификаторГруппы);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
				ОбщееВремяПолученияСообщенийВРегистр = 
			ТМС_ОбщегоНазначенияВызовСервера.РазницаМиллисекундВСекундах(
				Выборка.ВремяПолученияПервогоСообщения, 
				Выборка.ВремяПолученияПоследнегоСообщения);	
		СтруктураРезультата.Вставить("ОбщееВремяПолученияСообщенийВРегистр", ОбщееВремяПолученияСообщенийВРегистр); 
		ВремяПервого = ТМС_ОбщегоНазначенияВызовСервера.МиллисекундыВДатуПоФормату(
			Выборка.ВремяПолученияПервогоСообщения);
		СтруктураРезультата.Вставить("ВремяПолученияПервогоСообщения", ВремяПервого);
		ВремяПоследнего = ТМС_ОбщегоНазначенияВызовСервера.МиллисекундыВДатуПоФормату(
			Выборка.ВремяПолученияПоследнегоСообщения);
		СтруктураРезультата.Вставить("ВремяПолученияПоследнегоСообщения", ВремяПоследнего);
		ВремяМежду = ТМС_ОбщегоНазначенияВызовСервера.РазницаМиллисекундВСекундах(
			ВремяНачалаРаботыФоновыхЗаданий, Выборка.ВремяПолученияПервогоСообщения);
		СтруктураРезультата.Вставить("ВремяМеждуНачаломОтправкиИПолучениемПервогоСообщения", ВремяМежду);
		
	КонецЕсли;
	
	ВремяНачалаГен = ТМС_ОбщегоНазначенияВызовСервера.МиллисекундыВДатуПоФормату(
		ВремяНачалаГенерацииСообщений);
	СтруктураРезультата.Вставить("ВремяНачалаГенерацииСообщений", ВремяНачалаГен);
	ВремяОкончанияГен = ТМС_ОбщегоНазначенияВызовСервера.МиллисекундыВДатуПоФормату(
		ВремяОкончанияГенерацииСообщений);
	СтруктураРезультата.Вставить("ВремяОкончанияГенерацииСообщений", ВремяОкончанияГен);
	ВремяНачалаФЗ = ТМС_ОбщегоНазначенияВызовСервера.МиллисекундыВДатуПоФормату(
		ВремяНачалаРаботыФоновыхЗаданий);
	СтруктураРезультата.Вставить("ВремяНачалаРаботыФоновыхЗаданий", ВремяНачалаФЗ);
	
	ОбщееВремяЗаписи = ТМС_ОбщегоНазначенияВызовСервера.РазницаМиллисекундВСекундах(
		ВремяНачалаГенерацииСообщений, ВремяОкончанияГенерацииСообщений);
	СтруктураРезультата.Вставить("ОбщееВремяЗаписиСообщенийВОчередь", ОбщееВремяЗаписи);
	
	ВывестиРезультатыТестированияВПротокол(СтруктураРезультата, СтатистикаОтправкиИПолучения, Объект.КоличествоСообщений);
	
	Возврат СтруктураРезультата;
	
КонецФункции

&НаСервере
Процедура СоздатьТестовоеПриложениеНаСервере()
	
	ПараметрыТестовогоПриложения = ТМС_РаботаССервисомИнтеграции.ПараметрыСозданияТестовогоПриложения();
	БазовыйURL = ПараметрыТестовогоПриложения.БазовыйURL;
	Результат = ТМС_РаботаССервисомИнтеграции.СоздатьТестовоеПриложение(ПараметрыТестовогоПриложения);
	
	ПротоколВыполнения = Результат.ПротоколВыполнения;
	
	Если Результат.Успех Тогда
		ДанныеСозданногоПриложения = Новый ХранилищеЗначения(Результат.ДанныеПриложения);
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, НСтр("ru = 'Приложение создано успешно!'"));
		ИмяПриложения = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(
			Результат.ДанныеПриложения, "name", "");
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, 
			СтрШаблон(НСтр("ru = 'Имя: %1'"), ИмяПриложения));
		ИдентификаторПриложения = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(
			Результат.ДанныеПриложения, "_id", "");
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, 
			СтрШаблон(НСтр("ru = 'ID: %1'"), ИдентификаторПриложения));
		КлиентскийКлюч = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(
			Результат.ДанныеПриложения, "clientSecret", "");
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, 
			СтрШаблон(НСтр("ru = 'ClientSecret: %1'"), КлиентскийКлюч));
		ИдентификаторТокена = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(
			Результат.ДанныеПриложения, "id_token", "");
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, 
			СтрШаблон(НСтр("ru = 'IDToken: %1'"), ИдентификаторТокена));
	Иначе
		ДанныеСозданногоПриложения = Неопределено;
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, СтрШаблон(НСтр("ru = 'Ошибка: %1'"), Результат.Сообщение));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПоМетаданнымНаСервере()
	
	Если НЕ ЗначениеЗаполнено(СервисИнтеграцииДляНастройки) Тогда
		ТМС_ОбщегоНазначенияКлиентСервер.СообщениеПользователю(НСтр("ru = 'Необходимо выбрать сервис интеграции.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяПриложенияВМокСервисе) Тогда
		ТМС_ОбщегоНазначенияКлиентСервер.СообщениеПользователю(
			НСтр("ru = 'Необходимо указать имя приложения для mock-сервиса.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыСервиса = ТМС_РаботаССервисомИнтеграции.ПараметрыСозданияТестовогоПриложения();
	ПараметрыСервиса.ИмяСервиса1С = СервисИнтеграцииДляНастройки;
	ПараметрыСервиса.ИмяПриложения = ИмяПриложенияВМокСервисе;
	
	Результат = ТМС_РаботаССервисомИнтеграции.СоздатьПриложениеИзМетаданных(ПараметрыСервиса);
	
	ПротоколВыполнения = Результат.ПротоколВыполнения;
	
	Если Результат.Успех Тогда
		ТекстУспешногоСоздания = СтрШаблон(
			НСтр("ru = 'Приложение %1 успешно создано и настроено в mock-сервисе!'"), 
			ИмяПриложенияВМокСервисе);
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, ТекстУспешногоСоздания);
		ДанныеСозданногоПриложения = Новый ХранилищеЗначения(Результат.ДанныеПриложения);
		НастроитьСервисИнтеграцииНаСервере(СервисИнтеграцииДляНастройки, 
			ПараметрыСервиса.БазовыйURL, Результат.ДанныеПриложения);
	Иначе
		ТекстОшибкиСоздания = СтрШаблон(НСтр("ru = 'Ошибка при создании приложения: %1'"), 
			Результат.Сообщение);
		ТМС_ОбщегоНазначенияКлиентСервер.СообщениеПользователю(ТекстОшибкиСоздания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьСервисИнтеграцииНаСервере(ИмяСервиса, БазовыйURL, ДанныеПриложения)
	
	Попытка
		НастройкиСИ = СервисыИнтеграции[ИмяСервиса].ПолучитьНастройки();
		НастройкиСИ.ИмяПользователяВнешнегоСервисаИнтеграции = 
			ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(ДанныеПриложения, "name", "NA");
		НастройкиСИ.ПарольПользователяВнешнегоСервисаИнтеграции = 
			ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(ДанныеПриложения, "clientSecret", "NA");
		ИмяПриложенияДляАдреса = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(
			ДанныеПриложения, "name", "NA");
		НастройкиСИ.АдресВнешнегоСервисаИнтеграции = БазовыйURL + "/applications/" + ИмяПриложенияДляАдреса;
		СервисыИнтеграции[ИмяСервиса].УстановитьНастройки(НастройкиСИ);
		ТекстУспешнойНастройки = СтрШаблон(
			НСтр("ru = 'Сервис интеграции %1 успешно настроен.'"), ИмяСервиса);
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, ТекстУспешнойНастройки);
	Исключение
		ТекстОшибкиНастройки = СтрШаблон(
			НСтр("ru = 'Ошибка при установке настроек сервиса интеграции: %1'"), 
			ОписаниеОшибки());
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, ТекстОшибкиНастройки);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьТестовыйСервисИнтеграцииНаСервере()
	
	Если ДанныеСозданногоПриложения = Неопределено Или ДанныеСозданногоПриложения.Получить() = Неопределено Тогда
		ТМС_ОбщегоНазначенияКлиентСервер.СообщениеПользователю(
			НСтр("ru = 'Сначала необходимо создать тестовое приложение.'"));
		Возврат;
	КонецЕсли;
	
	НастроитьСервисИнтеграцииНаСервере(ТестовыйСервисИнтеграции, БазовыйURL, ДанныеСозданногоПриложения.Получить());
	
КонецПроцедуры

&НаСервере
Процедура СервисИнтеграцииДляОтправкиПриИзмененииНаСервере()
	
	Элементы.КаналДляОтправки.СписокВыбора.Очистить();
	ЗаполнитьСписокВыбораКаналовДляОтправки(СервисИнтеграцииДляОтправки);
	
КонецПроцедуры


&НаКлиенте
Процедура ПроверитьПолучениеВсехСообщений()
	
	ОтключитьОбработчик = ПроверитьПолучениеВсехСообщенийНаСервере();
	
	Если ОтключитьОбработчик Тогда
		ОтключитьОбработчикОжидания("ПроверитьПолучениеВсехСообщений");
		ДобавитьСтрокуВПротоколТестирования(СтатистикаОтправкиИПолучения, 
			"Обработчик ожидания получения всех сообщений отключен", Истина);


		РассчитатьСтатистикуОтправкиПолученияСообщений();
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОтправитьСообщение(ТекстСообщения, Описание = "")
	
	Сообщение = СервисыИнтеграции[СервисИнтеграцииДляОтправки].СоздатьСообщение();
	Сообщение.ИдентификаторСообщенияЗапроса = Новый УникальныйИдентификатор();
	
	Тело = Сообщение.ПолучитьТелоКакПоток();
	Буфер = ПолучитьБуферДвоичныхДанныхИзСтроки(ТекстСообщения);
	Тело.Записать(Буфер, 0, Буфер.Размер);
	Тело.Закрыть();
	
	Сообщение.Параметры.Вставить("РазмерСообщения", Буфер.Размер);
	Сообщение.Параметры.Вставить("ДатаОтправки", Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy HH:mm:ss"));
	Сообщение.Параметры.Вставить("Описание", Описание);
	Сообщение.Параметры.Вставить("ТипСообщения", "Тестовое");
	Сообщение.Параметры.Вставить("ИдентификаторГруппы", ИдентификаторГруппы);
	
	СервисыИнтеграции[СервисИнтеграцииДляОтправки][КаналДляОтправки].ОтправитьСообщение(Сообщение);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораКаналовДляОтправки(НаименованиеСервисаИнтеграции)
	
	ТекущийСервис = Метаданные.СервисыИнтеграции.Найти(НаименованиеСервисаИнтеграции);
	
	Если ТекущийСервис = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//@skip-check bsl-legacy-check-static-feature-access-for-unknown-left-part
	КаналаСервисаИнтеграцииОтправка = Метаданные.СвойстваОбъектов.НаправлениеСообщенияКаналаСервисаИнтеграции.Отправка;
	Для Каждого текКаналСервиса Из ТекущийСервис.КаналыСервисаИнтеграции Цикл
		Если текКаналСервиса.НаправлениеСообщения = КаналаСервисаИнтеграцииОтправка Тогда
			Элементы.КаналДляОтправки.СписокВыбора.Добавить(текКаналСервиса.Имя, текКаналСервиса.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Если Элементы.КаналДляОтправки.СписокВыбора.Количество() > 0 Тогда
		КаналДляОтправки = Элементы.КаналДляОтправки.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет строку в протокол выполнения.
//
// Параметры:
//  ТекстПротокола - Строка - Протокол выполнения (по ссылке).
//  Строка - Строка - Строка для добавления.
//
&НаСервере
Процедура ДобавитьСтрокуВПротокол(ТекстПротокола, Строка)
	
	ТекстПротокола = ТекстПротокола + ?(ПустаяСтрока(ТекстПротокола), "", Символы.ПС) + Строка;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиИзХранилища()
	
	ПараметрыСервисаИнтеграции = Константы.ТМС_ПараметрыСервисаИнтеграции.ПолучитьНастройки();
	
	СИ_БазовыйURL = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(
		ПараметрыСервисаИнтеграции, "БазовыйURL", "");	
	СИ_Логин = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(ПараметрыСервисаИнтеграции,"Логин", "");
	СИ_Пароль = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(ПараметрыСервисаИнтеграции,"Пароль", "");
	
	СИ_ИмяТестовогоПриложения = ТМС_РаботаССервисомИнтеграции.ИмяТестовогоПриложенияПоУмолчанию();
	СИ_ИмяТестовогоПроцесса = ТМС_РаботаССервисомИнтеграции.ИмяТестовогоПроцессаПоУмолчанию();
	СИ_ОписаниеТестовогоПриложения = ТМС_РаботаССервисомИнтеграции.ОписаниеТестовогоПриложенияПоУмолчанию();
	СИ_ОписаниеТестовогоПриложения = ТМС_РаботаССервисомИнтеграции.ОписаниеТестовогоПриложенияПоУмолчанию();
	
	
КонецПроцедуры	

&НаСервере
Процедура СохранитьНастройкиСервисаИнтеграцииНаСервере()
	
	ПараметрыСервисаИнтеграции.Вставить("БазовыйURL", СИ_БазовыйURL);
	ПараметрыСервисаИнтеграции.Вставить("Логин", СИ_Логин);
	ПараметрыСервисаИнтеграции.Вставить("Пароль", СИ_Пароль);
	Константы.ТМС_ПараметрыСервисаИнтеграции.Установить(Новый ХранилищеЗначения(ПараметрыСервисаИнтеграции));
	
КонецПроцедуры



// Выводит результаты тестирования в протокол в структурированном виде.
//
// Параметры:
//  СтруктураРезультата - Структура - Структура с результатами тестирования
//  ТекстовыйПротокол - ФорматированныйДокумент, ТекстовыйДокумент - Объект для вывода протокола
//  КоличествоСообщений - Число
//
&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиРезультатыТестированияВПротокол(СтруктураРезультата, ТекстовыйПротокол, КоличествоСообщений)
	
	// Проверяем наличие обязательного параметра
	Если СтруктураРезультата = Неопределено Тогда
		Возврат;
	КонецЕсли;  
	
	
	
	// Заголовок протокола
	ДобавитьСтрокуВПротоколТестирования(ТекстовыйПротокол, "");
	ДобавитьСтрокуВПротоколТестирования(ТекстовыйПротокол, "РЕЗУЛЬТАТЫ ТЕСТИРОВАНИЯ ИНТЕГРАЦИИ", Истина);
	ДобавитьСтрокуВПротоколТестирования(ТекстовыйПротокол, "==============================", Истина);
	ДобавитьСтрокуВПротоколТестирования(ТекстовыйПротокол, "");
	
	ДобавитьЗначениеВПротокол(ТекстовыйПротокол, "Количество сообщений", КоличествоСообщений);
	
	// Вывод временных меток
	ДобавитьСтрокуВПротоколТестирования(ТекстовыйПротокол, "Временные метки:", Истина);
	ДобавитьСтрокуВПротоколТестирования(ТекстовыйПротокол, "------------------------------");
	ДобавитьЗначениеВПротокол(ТекстовыйПротокол, "Начало генерации сообщений", 
		СтруктураРезультата.ВремяНачалаГенерацииСообщений);
	ДобавитьЗначениеВПротокол(ТекстовыйПротокол, "Окончание генерации сообщений", 
		СтруктураРезультата.ВремяОкончанияГенерацииСообщений);
	ДобавитьЗначениеВПротокол(ТекстовыйПротокол, "Начало работы фоновых заданий", 
		СтруктураРезультата.ВремяНачалаРаботыФоновыхЗаданий);
	ДобавитьЗначениеВПротокол(ТекстовыйПротокол, "Получение первого сообщения", 
		СтруктураРезультата.ВремяПолученияПервогоСообщения);
	ДобавитьЗначениеВПротокол(ТекстовыйПротокол, "Получение последнего сообщения", 
		СтруктураРезультата.ВремяПолученияПоследнегоСообщения);
	ДобавитьСтрокуВПротоколТестирования(ТекстовыйПротокол, "");
	
	// Вывод расчетных значений
	ДобавитьСтрокуВПротоколТестирования(ТекстовыйПротокол, "Расчетные значения:", Истина);
	ДобавитьСтрокуВПротоколТестирования(ТекстовыйПротокол, "------------------------------");
	ДобавитьЗначениеВПротокол(ТекстовыйПротокол, "Общее время записи сообщений в очередь", 
		СтруктураРезультата.ОбщееВремяЗаписиСообщенийВОчередь, " сек.");
	ДобавитьЗначениеВПротокол(ТекстовыйПротокол, "Общее время получения сообщений в регистр", 
		СтруктураРезультата.ОбщееВремяПолученияСообщенийВРегистр, " сек.");
	ДобавитьЗначениеВПротокол(ТекстовыйПротокол, 
		"Время между началом отправки и получением первого сообщения", 
		СтруктураРезультата.ВремяМеждуНачаломОтправкиИПолучениемПервогоСообщения, " сек.");
	ДобавитьСтрокуВПротоколТестирования(ТекстовыйПротокол, "");
	
КонецПроцедуры

// Добавляет строку в протокол тестирования с возможностью форматирования.
//
// Параметры:
//  ТекстовыйПротокол - ФорматированныйДокумент, ТекстовыйДокумент - Протокол для добавления строки
//  Текст - Строка - Текст для добавления в протокол
//  ЖирныйШрифт - Булево - Использовать жирный шрифт для текста
//
&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокуВПротоколТестирования(ТекстовыйПротокол, Текст, ЖирныйШрифт = Ложь)
	
	Если ТипЗнч(ТекстовыйПротокол) = Тип("ТекстовыйДокумент") Тогда
		ТекстовыйПротокол.ДобавитьСтроку(Текст);
	ИначеЕсли ТипЗнч(ТекстовыйПротокол) = Тип("ФорматированныйДокумент") Тогда
		
		ЭлементТекста = ТекстовыйПротокол.Добавить(Текст, Тип("ТекстФорматированногоДокумента"));
		
		Если ЖирныйШрифт Тогда
			// BSLLS:StyleElementConstructors-off
			//@skip-check new-font
			ЭлементТекста.Шрифт = Новый Шрифт(,, Истина);
			// BSLLS:StyleElementConstructors-on
		КонецЕсли;
		
		ТекстовыйПротокол.Добавить(, Тип("ПереводСтрокиФорматированногоДокумента"));
	// BSLLS:EmptyCodeBlock-off
	Иначе
		// Для других типов протокола ничего не делаем
	// BSLLS:EmptyCodeBlock-on
	КонецЕсли;
	
КонецПроцедуры

// Добавляет значение с подписью в протокол тестирования.
//
// Параметры:
//  ТекстовыйПротокол - ФорматированныйДокумент, ТекстовыйДокумент - Протокол для добавления значения
//  Подпись - Строка - Подпись к значению
//  Значение - Произвольный - Значение для добавления
//  СуффиксЗначения - Строка - Суффикс для добавления к значению
//
&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьЗначениеВПротокол(ТекстовыйПротокол, Подпись, Значение, СуффиксЗначения = "")
	
	ФорматированноеЗначение = ?(ЗначениеЗаполнено(Значение), Строка(Значение) + СуффиксЗначения, "<не определено>");
	СтрокаВывода = СтрШаблон("%1: %2", Подпись, ФорматированноеЗначение);
	
	ДобавитьСтрокуВПротоколТестирования(ТекстовыйПротокол, СтрокаВывода);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти