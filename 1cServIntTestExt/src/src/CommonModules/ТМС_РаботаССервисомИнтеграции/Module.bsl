

#Область ПрограммныйИнтерфейс

// Возвращает структуру параметров для создания тестового приложения с значениями по умолчанию.
//
// Возвращаемое значение:
//  Структура:
//   * БазовыйURL         - Строка
//   * Логин              - Строка
//   * Пароль             - Строка
//   * ИмяПриложения      - Строка
//   * ОписаниеПриложения - Строка
//   * ClientSecret       - Строка
//   * ИмяСервиса1С       - Строка
//
Функция ПараметрыСозданияТестовогоПриложения() Экспорт
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("БазовыйURL", БазовыйURLПоУмолчанию());
	Параметры.Вставить("Логин", ИмяАдминистратораПоУмолчанию());
	Параметры.Вставить("Пароль", ПарольАдминистратораПоУмолчанию());
	Параметры.Вставить("ИмяПриложения", ИмяТестовогоПриложенияПоУмолчанию());
	Параметры.Вставить("ОписаниеПриложения", ОписаниеТестовогоПриложенияПоУмолчанию());
	Параметры.Вставить("ClientSecret", СгенерироватьClientSecret());
	Параметры.Вставить("ИмяСервиса1С", "");
	
	//@skip-check constructor-function-return-section
	Возврат Параметры;
	
КонецФункции

// Создает тестовое приложение в mock-сервисе интеграции.
//
// Параметры:
//  Параметры - Структура - Параметры создания приложения.
//
// Возвращаемое значение:
//  Структура:
//   * Успех              - Булево
//   * Сообщение          - Строка
//   * ДанныеПриложения   - Структура
//   * ПротоколВыполнения - Строка
//
Функция СоздатьТестовоеПриложение(Знач Параметры) Экспорт
	
	// Валидация входных параметров
	ОбязательныеПоля = Новый Массив;
	ОбязательныеПоля.Добавить("БазовыйURL");
	ОбязательныеПоля.Добавить("Логин");
	ОбязательныеПоля.Добавить("Пароль");
	ОбязательныеПоля.Добавить("ИмяПриложения");
	ТМС_ОбщегоНазначенияКлиентСервер.ПроверитьОбязательныеПоля(Параметры, ОбязательныеПоля);
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("Сообщение", "");
	Результат.Вставить("ДанныеПриложения", Новый Структура);
	Результат.Вставить("ПротоколВыполнения", "");
	ПротоколВыполнения = "";
	
	Попытка
		
		// Авторизация
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Авторизация в системе...");
		ТокенАвторизации = ПолучитьТокенАвторизации(Параметры.БазовыйURL, Параметры.Логин, Параметры.Пароль);
		Если НЕ ЗначениеЗаполнено(ТокенАвторизации) Тогда
			ВызватьИсключение "Ошибка авторизации: не удалось получить токен доступа";
		КонецЕсли;
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Авторизация успешна.");
		
		// 1. Очистка старых данных
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Шаг 1/5: Полная очистка старых данных...");
		ОтветОчистки = ПолнаяОчисткаПриложения(Параметры.БазовыйURL, Параметры.ИмяПриложения, ТокенАвторизации);
		ОбработатьОтветОчистки(ОтветОчистки, Параметры.ИмяПриложения, ПротоколВыполнения);
		
		// Проверка отсутствия приложения после очистки
		ПроверитьОтсутствиеПриложения(Параметры.БазовыйURL, Параметры.ИмяПриложения, ТокенАвторизации);
		
		// 2. Создание приложения
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Шаг 2/4: Создание приложения...");
		URL = СоединитьURL(Параметры.БазовыйURL, ПутьAPI_Applications());
		ДанныеДляСоздания = Новый Структура("name, description, clientSecret", Параметры.ИмяПриложения, Параметры.ОписаниеПриложения, Параметры.ClientSecret);
		ОтветПриложения = ОтправитьHTTPЗапрос(URL, "POST", ДанныеДляСоздания, ТокенАвторизации);
		Если НЕ ОтветПриложения.Успех Тогда
			ВызватьИсключение "Ошибка создания приложения: " + ОтветПриложения.Сообщение;
		КонецЕсли;
		
		// 3. Создание процесса
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Шаг 3/4: Создание процесса...");
		
		// Безопасное получение ID приложения
		ApplicationId = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(ОтветПриложения.Данные, "data._id");
		Если НЕ ЗначениеЗаполнено(ApplicationId) Тогда
			ВызватьИсключение "Ответ сервера не содержит ID созданного приложения";
		КонецЕсли;
		
		URL = СоединитьURL(Параметры.БазовыйURL, ПутьAPI_Processes());
		ДанныеПроцесса = Новый Структура("name, applicationId", ИмяТестовогоПроцессаПоУмолчанию(), ApplicationId);
		ОтветПроцесса = ОтправитьHTTPЗапрос(URL, "POST", ДанныеПроцесса, ТокенАвторизации);
		Если НЕ ОтветПроцесса.Успех Тогда
			ВызватьИсключение "Ошибка создания процесса: " + ОтветПроцесса.Сообщение;
		КонецЕсли;
		
		// 4. Создание каналов
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Шаг 4/4: Создание каналов...");
		
		// Безопасное получение ID процесса
		ProcessId = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(ОтветПроцесса.Данные, "data._id");
		Если НЕ ЗначениеЗаполнено(ProcessId) Тогда
			ВызватьИсключение "Ответ сервера не содержит ID созданного процесса";
	КонецЕсли;	
	
		СоздатьКаналыДляТестовогоПриложения(Параметры.БазовыйURL, ProcessId, ТокенАвторизации);
		
		// Формируем результат
		Результат.Успех = Истина;
		Результат.Сообщение = "Тестовое приложение успешно создано";
		
		// Безопасное копирование данных приложения
		ДанныеПриложения = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(ОтветПриложения.Данные, "data", Новый Структура);
		Результат.ДанныеПриложения = ДанныеПриложения;
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Тестовые данные E2E успешно созданы!");
		
	Исключение
		Результат.Сообщение = ОписаниеОшибки();
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Ошибка при создании тестового приложения: " + Результат.Сообщение, УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
	Результат.ПротоколВыполнения = ПротоколВыполнения;
	Возврат Результат;
	
КонецФункции

// Создает и настраивает приложение в mock-сервисе на основе метаданных сервиса интеграции 1С.
//
// Параметры:
//  Параметры - Структура - Параметры для создания.
//
// Возвращаемое значение:
//  Структура:
//   * Успех              - Булево
//   * Сообщение          - Строка
//   * ДанныеПриложения   - Структура
//   * ПротоколВыполнения - Строка
//
Функция СоздатьПриложениеИзМетаданных(Знач Параметры) Экспорт
	
	// Валидация входных параметров
	ОбязательныеПоля = Новый Массив;
	ОбязательныеПоля.Добавить("БазовыйURL");
	ОбязательныеПоля.Добавить("Логин");
	ОбязательныеПоля.Добавить("Пароль");
	ОбязательныеПоля.Добавить("ИмяСервиса1С");
	ОбязательныеПоля.Добавить("ИмяПриложения");
	ТМС_ОбщегоНазначенияКлиентСервер.ПроверитьОбязательныеПоля(Параметры, ОбязательныеПоля);
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("Сообщение", "");
	Результат.Вставить("ДанныеПриложения", Новый Структура);
	Результат.Вставить("ПротоколВыполнения", "");
	ПротоколВыполнения = "";
	
	Попытка
		
		// Шаг 1: Авторизация
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Шаг 1: Авторизация в системе...");
		ТокенАвторизации = ПолучитьТокенАвторизации(Параметры.БазовыйURL, Параметры.Логин, Параметры.Пароль);
		Если НЕ ЗначениеЗаполнено(ТокенАвторизации) Тогда
			ВызватьИсключение "Ошибка авторизации: не удалось получить токен доступа";
		КонецЕсли;
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Авторизация успешна.");
		
		// Шаг 2: Очистка старых данных
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Шаг 2: Полная очистка старых данных для приложения '" + Параметры.ИмяПриложения + "'...");
		ОтветОчистки = ПолнаяОчисткаПриложения(Параметры.БазовыйURL, Параметры.ИмяПриложения, ТокенАвторизации);
		ОбработатьОтветОчистки(ОтветОчистки, Параметры.ИмяПриложения, ПротоколВыполнения);
		
		// Проверка отсутствия приложения после очистки
		ПроверитьОтсутствиеПриложения(Параметры.БазовыйURL, Параметры.ИмяПриложения, ТокенАвторизации);
		
		// Шаг 3: Создание приложения
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Шаг 3: Создание приложения '" + Параметры.ИмяПриложения + "'...");
		URL = СоединитьURL(Параметры.БазовыйURL, ПутьAPI_Applications());
		Описание = "Создано автоматически из метаданных 1С для сервиса: " + Параметры.ИмяСервиса1С;
		ДанныеДляСоздания = Новый Структура("name, description, clientSecret", Параметры.ИмяПриложения, Описание, СгенерироватьClientSecret());
		ОтветПриложения = ОтправитьHTTPЗапрос(URL, "POST", ДанныеДляСоздания, ТокенАвторизации);
		Если НЕ ОтветПриложения.Успех Тогда
			ВызватьИсключение "Ошибка создания приложения: " + ОтветПриложения.Сообщение;
		КонецЕсли;
		
		// Безопасное получение ID приложения
		ApplicationId = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(ОтветПриложения.Данные, "data._id");
		Если НЕ ЗначениеЗаполнено(ApplicationId) Тогда
			ВызватьИсключение "Ответ сервера не содержит ID созданного приложения";
		КонецЕсли;
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Приложение успешно создано. ID: " + ApplicationId);
		
		// Шаг 4: Анализ метаданных и создание сущностей
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Шаг 4: Анализ метаданных и создание сущностей...");
		СоздатьПроцессыИКаналыИзМетаданных(Параметры.БазовыйURL, Параметры.ИмяСервиса1С, ApplicationId, ТокенАвторизации, ПротоколВыполнения);
		
		// Формируем результат
			Результат.Успех = Истина;
		Результат.Сообщение = "Приложение и каналы успешно созданы из метаданных.";
		
		// Безопасное копирование данных приложения
		ДанныеПриложения = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(ОтветПриложения.Данные, "data", Новый Структура);
		Результат.ДанныеПриложения = ДанныеПриложения;
		
	Исключение
		Результат.Сообщение = ОписаниеОшибки();
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Критическая ошибка: " + Результат.Сообщение, УровеньЖурналаРегистрации.Ошибка);
	КонецПопытки;
	
	Результат.ПротоколВыполнения = ПротоколВыполнения;
	Возврат Результат;
	
КонецФункции

#Область Константы

// Возвращает базовый URL mock-сервиса по умолчанию.
//
// Возвращаемое значение:
//  Строка - URL.
//
Функция БазовыйURLПоУмолчанию() Экспорт
	
	// Используем локальный адрес для разработки
	//ИмяСервера = "localhost";
	//Порт = "9090";
	//Возврат "http://" + ИмяСервера + ":" + Порт;
	
	ТекущиеНастройки = Константы.ТМС_ПараметрыСервисаИнтеграции.ПолучитьНастройки();
	
	Возврат ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(ТекущиеНастройки, "БазовыйURL", "http://localhost:9090");
	
КонецФункции

// Возвращает имя пользователя администратора по умолчанию.
//
// Возвращаемое значение:
//  Строка - Имя пользователя.
//
Функция ИмяАдминистратораПоУмолчанию() Экспорт
	//Возврат "admin";
	ТекущиеНастройки = Константы.ТМС_ПараметрыСервисаИнтеграции.ПолучитьНастройки();
	
	Возврат ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(ТекущиеНастройки, "Логин", "admin");
КонецФункции

// Возвращает пароль администратора по умолчанию.
//
// Возвращаемое значение:
//  Строка - Пароль.
//
Функция ПарольАдминистратораПоУмолчанию() Экспорт
	
	ТекущиеНастройки = Константы.ТМС_ПараметрыСервисаИнтеграции.ПолучитьНастройки();
	
	Возврат ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(ТекущиеНастройки, "Пароль", "admin");
	
КонецФункции

// Возвращает имя тестового приложения по умолчанию.
//
// Возвращаемое значение:
//  Строка - Имя приложения.
//
Функция ИмяТестовогоПриложенияПоУмолчанию() Экспорт
	Возврат "testAppE2e";
КонецФункции

// Возвращает описание тестового приложения по умолчанию.
//
// Возвращаемое значение:
//  Строка - Описание.
//
Функция ОписаниеТестовогоПриложенияПоУмолчанию() Экспорт
	Возврат "Тестовое приложение для E2E-теста";
КонецФункции

// Возвращает путь к API для работы с приложениями.
//
// Возвращаемое значение:
//  Строка - Путь API.
//
Функция ПутьAPI_Applications() Экспорт
	Возврат "/api/applications";
КонецФункции

// Возвращает путь к API для работы с процессами.
//
// Возвращаемое значение:
//  Строка - Путь API.
//
Функция ПутьAPI_Processes() Экспорт
	Возврат "/api/processes";
КонецФункции

// Возвращает путь к API для работы с каналами.
//
// Возвращаемое значение:
//  Строка - Путь API.
//
Функция ПутьAPI_Channels() Экспорт
	Возврат "/api/channels";
КонецФункции

// Возвращает путь к API для аутентификации администратора.
//
// Возвращаемое значение:
//  Строка - Путь API.
//
Функция ПутьAPI_AdminLogin() Экспорт
	Возврат "/api/admin/login";
КонецФункции

// Возвращает имя тестового процесса по умолчанию.
//
// Возвращаемое значение:
//  Строка - Имя процесса.
//
Функция ИмяТестовогоПроцессаПоУмолчанию() Экспорт
	// BSLLS:UsingHardcodeNetworkAddress-off
	Возврат "e1c::ТестовыйПроект::Основной::OfficeToShop";
	// BSLLS:UsingHardcodeNetworkAddress-on
КонецФункции

#КонецОбласти

#КонецОбласти



#Область СлужебныеПроцедурыИФункции

#Область РаботаСАПИМокСервиса

// Выполняет полную очистку всех связанных сущностей приложения.
//
// Параметры:
//  БазовыйURL - Строка - Базовый URL mock-сервиса.
//  ИмяПриложения - Строка - Имя приложения для очистки.
//  Токен - Строка - JWT-токен авторизации.
//
// Возвращаемое значение:
//  Структура - Результат очистки.
//
Функция ПолнаяОчисткаПриложения(Знач БазовыйURL, Знач ИмяПриложения, Знач Токен)
	
	Результат = Новый Структура("Успех, Сообщение, КодСостояния", Ложь, "", 0);
	
	Попытка
		
		// 1. Находим приложение по имени
		НайденноеПриложение = НайтиПриложениеПоИмени(БазовыйURL, ИмяПриложения, Токен);
		Если НайденноеПриложение = Неопределено Тогда
			Результат.Успех = Истина;
			Результат.Сообщение = "Приложение не существовало";
			Результат.КодСостояния = 404;
			Возврат Результат;
		КонецЕсли;
		
		// Безопасное получение ID приложения
		IDПриложения = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(НайденноеПриложение, "_id");
		Если НЕ ЗначениеЗаполнено(IDПриложения) Тогда
			ВызватьИсключение "Не удалось получить ID приложения из ответа сервера";
		КонецЕсли;
		
		// 2. Получаем и удаляем все процессы и их каналы
		Процессы = ПолучитьПроцессыПриложения(БазовыйURL, IDПриложения, Токен);
		Для Каждого Процесс Из Процессы Цикл
			УдалитьКаналыИПроцесс(БазовыйURL, Процесс, Токен, Результат);
			Если НЕ Результат.Успех Тогда
					Возврат Результат;
				КонецЕсли;
			КонецЦикла;
			
		// 3. Удаляем само приложение
		URL = СоединитьURL(БазовыйURL, ПутьAPI_Applications() + "/" + IDПриложения);
		ОтветУдаления = ОтправитьHTTPЗапрос(URL, "DELETE", Неопределено, Токен);
		
		Если НЕ ОтветУдаления.Успех Тогда
			Результат.Сообщение = "Ошибка удаления приложения: " + ОтветУдаления.Сообщение;
			Результат.КодСостояния = ОтветУдаления.КодСостояния;
			Возврат Результат;
		КонецЕсли;
		
		Результат.Успех = Истина;
		Результат.Сообщение = "Приложение и все связанные сущности успешно удалены";
		Результат.КодСостояния = ОтветУдаления.КодСостояния;
		
	Исключение
		Результат.Сообщение = "Ошибка при полной очистке: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Получает все процессы приложения по ID приложения.
//
// Параметры:
//  БазовыйURL - Строка - Базовый URL mock-сервиса.
//  IDПриложения - Строка - ID приложения.
//  Токен - Строка - JWT-токен авторизации.
//
// Возвращаемое значение:
//  Массив из Структура
//
Функция ПолучитьПроцессыПриложения(Знач БазовыйURL, Знач IDПриложения, Знач Токен)
	
	URL = СоединитьURL(БазовыйURL, ПутьAPI_Processes() + "?applicationId=" + IDПриложения);
	Ответ = ОтправитьHTTPЗапрос(URL, "GET", Неопределено, Токен);
	
	Если Ответ.Успех Тогда
		ДанныеОтвета = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(Ответ.Данные, "data", Новый Массив);
		Возврат ДанныеОтвета;
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

// Получает все каналы процесса по ID процесса.
//
// Параметры:
//  БазовыйURL - Строка - Базовый URL mock-сервиса.
//  IDПроцесса - Строка - ID процесса.
//  Токен - Строка - JWT-токен авторизации.
//
// Возвращаемое значение:
//  Массив из Структура
//
Функция ПолучитьКаналыПроцесса(Знач БазовыйURL, Знач IDПроцесса, Знач Токен)
	
	URL = СоединитьURL(БазовыйURL, ПутьAPI_Channels() + "?processId=" + IDПроцесса);
	Ответ = ОтправитьHTTPЗапрос(URL, "GET", Неопределено, Токен);
	
	Если Ответ.Успех Тогда
		ДанныеОтвета = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(Ответ.Данные, "data", Новый Массив);
		Возврат ДанныеОтвета;
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

#КонецОбласти



#Область РаботаСHTTP

// Получает JWT-токен авторизации для работы с API.
//
// Параметры:
//  БазовыйURL - Строка - Базовый URL mock-сервиса.
//  Логин - Строка - Логин администратора.
//  Пароль - Строка - Пароль администратора.
//
// Возвращаемое значение:
//  Строка - JWT-токен авторизации или пустая строка при ошибке.
//
Функция ПолучитьТокенАвторизации(Знач БазовыйURL, Знач Логин, Знач Пароль)
	
	Токен = "";
	Попытка
		ДанныеАвторизации = Новый Структура("username, password", Логин, Пароль);
		URL = СоединитьURL(БазовыйURL, ПутьAPI_AdminLogin());
		Ответ = ОтправитьHTTPЗапрос(URL, "POST", ДанныеАвторизации);
		
		Если Ответ.Успех Тогда
			// Безопасное получение токена из ответа
			Токен = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(Ответ.Данные, "token", "");
		КонецЕсли;
	Исключение
		ЗаписьЖурналаРегистрации(ИсточникЖурнала(), УровеньЖурналаРегистрации.Ошибка, , , "Ошибка получения токена авторизации: " + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Токен;

КонецФункции

// Отправляет HTTP запрос к API mock-сервиса.
//
// Параметры:
//  URL - Строка - URL для запроса.
//  Метод - Строка - HTTP метод (GET, POST, DELETE).
//  Данные - Произвольный - Данные для отправки (для POST/PUT).
//  Токен - Строка - JWT-токен авторизации.
//
// Возвращаемое значение:
//  Структура - Результат запроса.
//
Функция ОтправитьHTTPЗапрос(Знач URL, Знач Метод, Знач Данные = Неопределено, Знач Токен = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Успех", Ложь);
	Результат.Вставить("Сообщение", "");
	Результат.Вставить("Данные", Новый Структура);
	Результат.Вставить("КодСостояния", 0);
	
	Попытка
		АдресСервера = ИзвлечьАдресСервераИзURL(URL);
		Путь = ИзвлечьПутьИзURL(URL);
		ИспользоватьSSL = СтрНачинаетсяС(URL, "https://");
		
		HTTPСоединение = Новый HTTPСоединение(АдресСервера, , , , , 30, ИспользоватьSSL);
		HTTPЗапрос = Новый HTTPЗапрос(Путь);
		HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/json");
		
		Если ЗначениеЗаполнено(Токен) Тогда
			HTTPЗапрос.Заголовки.Вставить("Authorization", "Bearer " + Токен);
		КонецЕсли;
		
		Если Данные <> Неопределено И (Метод = "POST" ИЛИ Метод = "PUT") Тогда
			HTTPЗапрос.УстановитьТелоИзСтроки(СериализоватьJSON(Данные));
		КонецЕсли;
		
		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
		
		Результат.КодСостояния = HTTPОтвет.КодСостояния;
		ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		
		Если HTTPОтвет.КодСостояния >= 200 И HTTPОтвет.КодСостояния <= 299 Тогда
			Результат.Успех = Истина;
			Если НЕ ПустаяСтрока(ТелоОтвета) Тогда
				Попытка
					Результат.Данные = ДесериализоватьJSON(ТелоОтвета);
	Исключение
					Результат.Сообщение = "Ошибка десериализации JSON: " + ОписаниеОшибки();
					Результат.Успех = Ложь;
	КонецПопытки;
			КонецЕсли;
		Иначе
			Результат.Сообщение = "HTTP ошибка: " + HTTPОтвет.КодСостояния + " - " + ТелоОтвета;
		КонецЕсли;
		
	Исключение
		Результат.Сообщение = "Ошибка HTTP запроса: " + ОписаниеОшибки();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаС_JSON

// Сериализует произвольные данные в JSON строку.
//
// Параметры:
//  Данные - Произвольный - Данные для сериализации.
//
// Возвращаемое значение:
//  Строка - JSON представление данных.
//
Функция СериализоватьJSON(Знач Данные)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Данные);
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Десериализует JSON строку в данные 1С.
//
// Параметры:
//  JSONСтрока - Строка - JSON строка для десериализации.
//
// Возвращаемое значение:
//  Произвольный - Десериализованные данные.
//
Функция ДесериализоватьJSON(Знач JSONСтрока)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(JSONСтрока);
	Возврат ПрочитатьJSON(ЧтениеJSON, Истина);
	
КонецФункции

#КонецОбласти

#Область РаботаСоСтроками

// Извлекает адрес сервера из URL.
//
// Параметры:
//  URL - Строка - URL для анализа.
//
// Возвращаемое значение:
//  Строка - Адрес сервера (например, "localhost:9090").
//
Функция ИзвлечьАдресСервераИзURL(Знач URL)
	
	URLБезПротокола = СтрЗаменить(СтрЗаменить(URL, "http://", ""), "https://", "");
	ПозицияСлеша = СтрНайти(URLБезПротокола, "/");
	
	Возврат ?(ПозицияСлеша > 0, Лев(URLБезПротокола, ПозицияСлеша - 1), URLБезПротокола);
	
КонецФункции

// Извлекает путь из URL.
//
// Параметры:
//  URL - Строка - URL для анализа.
//
// Возвращаемое значение:
//  Строка - Путь (например, "/api/applications").
//
Функция ИзвлечьПутьИзURL(Знач URL)
	
	URLБезПротокола = СтрЗаменить(СтрЗаменить(URL, "http://", ""), "https://", "");
	ПозицияСлеша = СтрНайти(URLБезПротокола, "/");
	
	Возврат ?(ПозицияСлеша > 0, Сред(URLБезПротокола, ПозицияСлеша), "/");
	
КонецФункции

// Соединяет базовый URL и путь, корректно обрабатывая слеши.
//
// Параметры:
//  БазовыйURL - Строка - Базовый URL.
//  Путь - Строка - Путь для добавления.
//
// Возвращаемое значение:
//  Строка - Правильно сформированный URL.
//
Функция СоединитьURL(Знач БазовыйURL, Знач Путь)
	
	Если СтрЗаканчиваетсяНа(БазовыйURL, "/") Тогда
		БазовыйURL = Лев(БазовыйURL, СтрДлина(БазовыйURL) - 1);
	КонецЕсли;
	
	Если СтрНачинаетсяС(Путь, "/") Тогда
		Путь = Сред(Путь, 2);
	КонецЕсли;
	
	Возврат БазовыйURL + "/" + Путь;
	
КонецФункции

// Разбирает полное имя канала на имя процесса и короткое имя канала.
// Возвращает структуру с полями ИмяПроцесса и ИмяКанала.
//
// Параметры:
//   ПолноеИмя - Строка - Полное имя канала из метаданных
//
// Возвращаемое значение:
//   Структура - с полями ИмяПроцесса и ИмяКанала
//
Функция РазобратьПолноеИмяКанала(Знач ПолноеИмя)
	Результат = Новый Структура("ИмяПроцесса, ИмяКанала");
	// Используем стандартную функцию для поиска последней точки
	ПозицияПоследнейТочки = СтрНайти(ПолноеИмя, ".", НаправлениеПоиска.СКонца, СтрДлина(ПолноеИмя) , 1);
	Если ПозицияПоследнейТочки > 0 Тогда
		Результат.ИмяПроцесса = Лев(ПолноеИмя, ПозицияПоследнейТочки - 1);
		Результат.ИмяКанала = Сред(ПолноеИмя, ПозицияПоследнейТочки + 1);
	Иначе
		// Если точки нет, считаем, что все имя - это имя канала
		Результат.ИмяПроцесса = "";
		Результат.ИмяКанала = ПолноеИмя;
	КонецЕсли;
	Возврат Результат;
КонецФункции

#КонецОбласти

// Возвращает источник журнала регистрации для модуля.
//
// Возвращаемое значение:
//  Строка - Источник журнала регистрации.
//
Функция ИсточникЖурнала() Экспорт
	Возврат "ТМС_РаботаССервисомИнтеграции";
КонецФункции

// Генерирует случайный ClientSecret для приложения.
//
// Возвращаемое значение:
//  Строка - Случайный ClientSecret в hex формате (32 символа).
//
Функция СгенерироватьClientSecret() Экспорт
	
	HexСимволы = "0123456789abcdef";
	ClientSecret = "";
	Генератор = Новый ГенераторСлучайныхЧисел();
	
	Счетчик = 0;
	Пока Счетчик < 32 Цикл
		СлучайнаяПозиция = Генератор.СлучайноеЧисло(0, 15) + 1;
		ClientSecret = ClientSecret + Сред(HexСимволы, СлучайнаяПозиция, 1);
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Возврат ClientSecret;
	
КонецФункции

// Добавляет строку в протокол выполнения.
//
// Параметры:
//  ПротоколВыполнения - Строка - Протокол выполнения (по ссылке).
//  Строка - Строка - Строка для добавления.
//  УровеньЖурнала - УровеньЖурналаРегистрации - Уровень важности сообщения.
//
Процедура ДобавитьСтрокуВПротокол(ПротоколВыполнения, Строка, УровеньЖурнала = Неопределено)
	
	Если УровеньЖурнала = Неопределено Тогда
		УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	ПротоколВыполнения = ПротоколВыполнения + ?(ПустаяСтрока(ПротоколВыполнения), "", Символы.ПС) + Строка;
	// ЗаписьЖурналаРегистрации(ИсточникЖурнала(), УровеньЖурнала, , , Строка);
	
КонецПроцедуры

// Обрабатывает ответ от операции очистки приложения.
// 
// Параметры:
//  ОтветОчистки - Структура - Ответ от функции ПолнаяОчисткаПриложения.
//  ИмяПриложения - Строка - Имя очищаемого приложения.
//  ПротоколВыполнения - Строка - Протокол выполнения (по ссылке).
//
Процедура ОбработатьОтветОчистки(Знач ОтветОчистки, Знач ИмяПриложения, ПротоколВыполнения)
	
	Если ОтветОчистки.КодСостояния = 404 Тогда
			ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Приложение не существовало (код 404). Продолжаем создание.");
		ИначеЕсли ОтветОчистки.Успех Тогда
			ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Полная очистка завершена успешно (код " + ОтветОчистки.КодСостояния + ").");
	ИначеЕсли ОтветОчистки.КодСостояния = 409 Тогда
		ВызватьИсключение "Невозможно удалить приложение '" + ИмяПриложения + "'. " + ОтветОчистки.Сообщение + " Код ответа: " + ОтветОчистки.КодСостояния;
		Иначе
		ВызватьИсключение "Ошибка при очистке приложения '" + ИмяПриложения + "'. Код ответа: " + ОтветОчистки.КодСостояния + ". Сообщение сервера: " + ОтветОчистки.Сообщение;
		КонецЕсли;
		
КонецПроцедуры

// Проверяет, что приложение с указанным именем отсутствует в системе.
//
// Параметры:
//  БазовыйURL - Строка - Базовый URL mock-сервиса.
//  ИмяПриложения - Строка - Имя приложения для проверки.
//  Токен - Строка - JWT-токен авторизации.
//
Процедура ПроверитьОтсутствиеПриложения(Знач БазовыйURL, Знач ИмяПриложения, Знач Токен)
	
	НайденноеПриложение = НайтиПриложениеПоИмени(БазовыйURL, ИмяПриложения, Токен);
	Если НайденноеПриложение <> Неопределено Тогда
		ВызватьИсключение "Приложение с именем '" + ИмяПриложения + "' не было удалено. Повторите попытку позже.";
		КонецЕсли;
		
КонецПроцедуры

// Находит приложение по имени.
//
// Параметры:
//  БазовыйURL - Строка - Базовый URL mock-сервиса.
//  ИмяПриложения - Строка - Имя приложения для поиска.
//  Токен - Строка - JWT-токен авторизации.
//
// Возвращаемое значение:
//  Структура - Данные найденного приложения или Неопределено.
//
Функция НайтиПриложениеПоИмени(Знач БазовыйURL, Знач ИмяПриложения, Знач Токен)
	
	URL = СоединитьURL(БазовыйURL, ПутьAPI_Applications());
	Ответ = ОтправитьHTTPЗапрос(URL, "GET", Неопределено, Токен);
	
	Если НЕ Ответ.Успех Тогда
		ВызватьИсключение "Ошибка получения списка приложений: " + Ответ.Сообщение;
		КонецЕсли;
		
	// Безопасное получение массива приложений
	МассивПриложений = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(Ответ.Данные, "data", Новый Массив);
	Если ТипЗнч(МассивПриложений) = Тип("Массив") Тогда
		Для Каждого Приложение Из МассивПриложений Цикл
			ИмяТекущегоПриложения = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(Приложение, "name", "");
			Если ИмяТекущегоПриложения = ИмяПриложения Тогда
				Возврат Приложение;
		КонецЕсли;
		КонецЦикла;
		КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

// Создает каналы для тестового приложения.
//
// Параметры:
//  БазовыйURL - Строка - Базовый URL mock-сервиса.
//  IDПроцесса - Строка - ID процесса, к которому привязываются каналы.
//  Токен - Строка - JWT-токен авторизации.
//
Процедура СоздатьКаналыДляТестовогоПриложения(Знач БазовыйURL, Знач IDПроцесса, Знач Токен)
	
	// Канал 1
	СоздатьКанал(БазовыйURL, "e2eOutOfficeToOffice", IDПроцесса, "outbound", "OfficeToOffice", Токен);
	// Канал 2
	СоздатьКанал(БазовыйURL, "e2eInOfficeToOffice", IDПроцесса, "inbound", "OfficeToOffice", Токен);
	// Канал 3
	СоздатьКанал(БазовыйURL, "e2eOutOfficeToShop", IDПроцесса, "outbound", "OfficeToShop", Токен);
	
КонецПроцедуры

// Создает один канал.
//
// Параметры:
//  БазовыйURL - Строка - Базовый URL mock-сервиса.
//  Имя - Строка - Имя канала.
//  IDПроцесса - Строка - ID процесса.
//  Направление - Строка - "inbound" или "outbound".
//  Назначение - Строка - Адрес назначения.
//  Токен - Строка - JWT-токен авторизации.
//
Процедура СоздатьКанал(Знач БазовыйURL, Знач Имя, Знач IDПроцесса, Знач Направление, Знач Назначение, Знач Токен)
	
	URL = СоединитьURL(БазовыйURL, ПутьAPI_Channels());
	ДанныеКанала = Новый Структура;
	ДанныеКанала.Вставить("name", Имя);
	ДанныеКанала.Вставить("processId", IDПроцесса);
	ДанныеКанала.Вставить("direction", Направление);
	ДанныеКанала.Вставить("destination", Назначение);
	
	Ответ = ОтправитьHTTPЗапрос(URL, "POST", ДанныеКанала, Токен);
	Если НЕ Ответ.Успех Тогда
		ВызватьИсключение "Ошибка создания канала '" + Имя + "': " + Ответ.Сообщение;
		КонецЕсли;
		
КонецПроцедуры

// Удаляет каналы и сам процесс.
//
// Параметры:
//  БазовыйURL - Строка - Базовый URL mock-сервиса.
//  Процесс - Структура - Данные процесса.
//  Токен - Строка - JWT-токен авторизации.
//  Результат - Структура - Структура для возврата ошибки (по ссылке).
//
Процедура УдалитьКаналыИПроцесс(Знач БазовыйURL, Знач Процесс, Знач Токен, Результат)
	
	// Безопасное получение ID процесса
	IDПроцесса = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(Процесс, "_id");
	Если НЕ ЗначениеЗаполнено(IDПроцесса) Тогда
		Результат.Успех = Ложь;
		Результат.Сообщение = "Не удалось получить ID процесса";
		Возврат;
	КонецЕсли;
	
	Каналы = ПолучитьКаналыПроцесса(БазовыйURL, IDПроцесса, Токен);
	
	// Удаляем каждый канал
	Для Каждого Канал Из Каналы Цикл
		IDКанала = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(Канал, "_id");
		Если НЕ ЗначениеЗаполнено(IDКанала) Тогда
			Продолжить;
		КонецЕсли;
		
		URL = СоединитьURL(БазовыйURL, ПутьAPI_Channels() + "/" + IDКанала);
		ОтветКанала = ОтправитьHTTPЗапрос(URL, "DELETE", Неопределено, Токен);
		
		Если ОтветКанала.КодСостояния = 409 Тогда
			ИмяКанала = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(Канал, "name", "неизвестный канал");
			Результат.Успех = Ложь;
			Результат.Сообщение = "Невозможно удалить канал '" + ИмяКанала + "'. В канале есть сообщения.";
			Результат.КодСостояния = 409;
			Возврат;
		КонецЕсли;
		
		
	КонецЦикла;
	
	// Удаляем процесс
	URL = СоединитьURL(БазовыйURL, ПутьAPI_Processes() + "/" + IDПроцесса);
	ОтветПроцесса = ОтправитьHTTPЗапрос(URL, "DELETE", Неопределено, Токен);
	
	Если НЕ ОтветПроцесса.Успех Тогда
		ИмяПроцесса = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(Процесс, "name", "неизвестный процесс");
		Результат.Успех = Ложь;
		Результат.Сообщение = "Ошибка удаления процесса '" + ИмяПроцесса + "': " + ОтветПроцесса.Сообщение;
		Результат.КодСостояния = ОтветПроцесса.КодСостояния;
	Иначе
		ЗаполнитьЗначенияСвойств(Результат, ОтветКанала);
	КонецЕсли;
	
КонецПроцедуры

// Создает процессы и каналы на основе метаданных 1С.
//
// Параметры:
//  БазовыйURL - Строка - Базовый URL mock-сервиса.
//  ИмяСервиса1С - Строка - Имя сервиса интеграции в конфигурации 1С.
//  ApplicationId - Строка - ID родительского приложения.
//  Токен - Строка - JWT-токен авторизации.
//  ПротоколВыполнения - Строка - Протокол выполнения (по ссылке).
//
Процедура СоздатьПроцессыИКаналыИзМетаданных(Знач БазовыйURL, Знач ИмяСервиса1С, Знач ApplicationId, Знач Токен, ПротоколВыполнения)
	
	// Анализ метаданных и группировка каналов по процессам
	ПроцессыИКаналы = СгруппироватьКаналыПоПроцессамИзМетаданных(ИмяСервиса1С);
	ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Анализ завершен. Найдено уникальных процессов: " + ПроцессыИКаналы.Количество());
	
	// Создание процессов и каналов в mock-сервисе
	ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Создание сущностей в mock-сервисе...");
	Для Каждого КлючЗначение Из ПроцессыИКаналы Цикл
		ИмяПроцесса = КлючЗначение.Ключ;
		МассивКаналов = КлючЗначение.Значение;
		
		// Создаем процесс
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, "  - Создание процесса: " + ИмяПроцесса);
		ДанныеПроцесса = Новый Структура("name, applicationId", ИмяПроцесса, ApplicationId);
		URL = СоединитьURL(БазовыйURL, ПутьAPI_Processes());
		ОтветПроцесса = ОтправитьHTTPЗапрос(URL, "POST", ДанныеПроцесса, Токен);
		Если НЕ ОтветПроцесса.Успех Тогда
			ВызватьИсключение "Ошибка создания процесса '" + ИмяПроцесса + "': " + ОтветПроцесса.Сообщение;
		КонецЕсли;
		
		// Безопасное получение ID процесса
		ProcessId = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(ОтветПроцесса.Данные, "data._id");
		Если НЕ ЗначениеЗаполнено(ProcessId) Тогда
			ВызватьИсключение "Ответ сервера не содержит ID созданного процесса '" + ИмяПроцесса + "'";
		КонецЕсли;
		ДобавитьСтрокуВПротокол(ПротоколВыполнения, "    Процесс создан. ID: " + ProcessId);
		
		// Создаем каналы для этого процесса
		Для Каждого СтруктураКанала Из МассивКаналов Цикл
			ДобавитьСтрокуВПротокол(ПротоколВыполнения, "    - Создание канала: " + СтруктураКанала.Имя);
			СоздатьКанал(БазовыйURL, СтруктураКанала.Имя, ProcessId, СтруктураКанала.Направление, СтруктураКанала.Имя, Токен);
		КонецЦикла;
	КонецЦикла;
	ДобавитьСтрокуВПротокол(ПротоколВыполнения, "Все процессы и каналы успешно созданы.");
	
КонецПроцедуры

// Группирует каналы из метаданных по процессам.
//
// Параметры:
//  ИмяСервиса1С - Строка - Имя сервиса интеграции в конфигурации 1С.
//
// Возвращаемое значение:
//  Соответствие:
//   Ключ     - Строка (Имя процесса)
//   Значение - Массив из Структура (канал)
//
Функция СгруппироватьКаналыПоПроцессамИзМетаданных(Знач ИмяСервиса1С)
	
		ПроцессыИКаналы = Новый Соответствие;
	СервисМетаданные = Метаданные.СервисыИнтеграции[ИмяСервиса1С];
		
		Для Каждого КаналМетаданные Из СервисМетаданные.КаналыСервисаИнтеграции Цикл
			РазборИмени = РазобратьПолноеИмяКанала(КаналМетаданные.ИмяКаналаВнешнегоСервисаИнтеграции);
			ИмяПроцесса = РазборИмени.ИмяПроцесса;
		
		Если НЕ ЗначениеЗаполнено(ИмяПроцесса) Тогда
			Продолжить; // Пропускаем каналы без явного процесса
		КонецЕсли;
			
			Если ПроцессыИКаналы[ИмяПроцесса] = Неопределено Тогда
				ПроцессыИКаналы.Вставить(ИмяПроцесса, Новый Массив);
			КонецЕсли;
			
			МассивКаналов = ПроцессыИКаналы[ИмяПроцесса];
			СтруктураКанала = Новый Структура;
		СтруктураКанала.Вставить("Имя", РазборИмени.ИмяКанала);
		//@skip-check bsl-legacy-check-static-feature-access-for-unknown-left-part
		Направление = ?(КаналМетаданные.НаправлениеСообщения = Метаданные.СвойстваОбъектов.НаправлениеСообщенияКаналаСервисаИнтеграции.Отправка, "outbound", "inbound");
			СтруктураКанала.Вставить("Направление", Направление);
			МассивКаналов.Добавить(СтруктураКанала);			
		КонецЦикла;
	
	Возврат ПроцессыИКаналы;
	
КонецФункции

#КонецОбласти

