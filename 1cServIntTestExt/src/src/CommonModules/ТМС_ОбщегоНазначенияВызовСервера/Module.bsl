////////////////////////////////////////////////////////////////////////////////
// ОБЩИЙ МОДУЛЬ ТМС_ОБЩЕГОНАЗНАЧЕНИЯВЫЗОВСЕРВЕРА
//
// Содержит серверные функции и процедуры общего назначения для тестирования
// интеграции с mock-сервисом. Предоставляет серверную функциональность
// для работы с фоновыми заданиями, отправки сообщений и обработки времени.
//
// Copyright (c) 2025 rzateev
// 
// Этот файл является частью проекта 1cServiceIntegrationMock,
// распространяемого под лицензией MIT.
// Подробности см. в файле LICENSE в корне проекта.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Прочитать значение константы
//
// Параметры:
//  ИмяКонстанты - Строка - Наименование константы 
// 
// Возвращаемое значение:
//  Произвольный - Текущее значение Константы
//
Функция ПрочитатьЗначениеКонстанты(Знач ИмяКонстанты) Экспорт
		
	Возврат Константы[ИмяКонстанты].Получить()
	
КонецФункции

// Сохраняет значение константы
// В отличии от Константы[ИмяКонстанты].Установить(НовоеЗначение);
//
// Параметры:
//  ИмяКонстанты	 - Строка - Наименование константы 
//  НовоеЗначение	 - Произвольный - Новое значение константы
Процедура СохранитьЗначениеКонстанты(Знач ИмяКонстанты, Знач НовоеЗначение) Экспорт

	Константа = Константы[ИмяКонстанты].СоздатьМенеджерЗначения();	
	Константа.Значение = НовоеЗначение;
	Константа.Записать();
	
КонецПроцедуры	

// Преобразует миллисекунды в дату с учетом часового пояса.
//
// Параметры:
//  Миллисекунды - Число - Время в миллисекундах от начала эпохи
//
// Возвращаемое значение:
//  Дата - Дата с учетом часового пояса
//
Функция МиллисекундыВДатуСУчетомЧасовогоПояса(Знач Миллисекунды) Экспорт
	
	БазоваяДата = Дата(1, 1, 1);
	
	// Преобразуем миллисекунды в секунды
	Секунды = Миллисекунды / 1000;
	
	// Добавляем секунды к базовой дате с учетом часового пояса
	РезультатДата = БазоваяДата + Секунды + СмещениеСтандартногоВремени(ЧасовойПояс());
	
	Возврат РезультатДата;
	
КонецФункции

// Преобразует миллисекунды в текстовое представление даты по указанному формату.
//
// Параметры:
//  Миллисекунды - Число - Время в миллисекундах от начала эпохи
//  Формат - Строка - Формат вывода даты
//
// Возвращаемое значение:
//  Строка - Текстовое представление даты
//
Функция МиллисекундыВДатуПоФормату(Знач Миллисекунды, Знач Формат = "ДФ=dd.MM.yyyy HH:mm:ss") Экспорт
	
	Дата = МиллисекундыВДатуСУчетомЧасовогоПояса(Миллисекунды);
	
	// Преобразуем дату в текст с указанным форматом
	ТекстоваяДата = Формат(Дата, Формат);
	
	Возврат ТекстоваяДата;
	
КонецФункции

// Вычисляет разницу между двумя датами в секундах.
//
// Параметры:
//  ДатаНачала - Дата - Начальная дата для расчета
//  ДатаОкончания - Дата - Конечная дата для расчета
//
// Возвращаемое значение:
//  Число - Разница между датами в секундах
//
Функция РазницаДатВСекундах(Знач ДатаНачала, Знач ДатаОкончания) Экспорт
	
	// Проверка типов параметров
	Если ТипЗнч(ДатаНачала) <> Тип("Дата") Тогда
		ВызватьИсключение "Параметр ДатаНачала должен быть типа Дата";
	КонецЕсли;
	
	Если ТипЗнч(ДатаОкончания) <> Тип("Дата") Тогда
		ВызватьИсключение "Параметр ДатаОкончания должен быть типа Дата";
	КонецЕсли;
	
	// Вычисляем разницу в секундах
	РазницаВСекундах = (ДатаОкончания - ДатаНачала);
	
	Возврат РазницаВСекундах;
	
КонецФункции

// Вычисляет разницу между метками времени в миллисекундах и возвращает результат в секундах.
//
// Параметры:
//  МиллисекундыНачала - Число - Начальная метка времени в миллисекундах
//  МиллисекундыОкончания - Число - Конечная метка времени в миллисекундах
//
// Возвращаемое значение:
//  Число - Разница во времени в секундах
//
Функция РазницаМиллисекундВСекундах(Знач МиллисекундыНачала, Знач МиллисекундыОкончания) Экспорт
	
	// Преобразуем миллисекунды в даты
	ДатаНачала = МиллисекундыВДатуСУчетомЧасовогоПояса(МиллисекундыНачала);
	ДатаОкончания = МиллисекундыВДатуСУчетомЧасовогоПояса(МиллисекундыОкончания);
	
	// Вычисляем разницу
	Возврат РазницаДатВСекундах(ДатаНачала, ДатаОкончания);
	
КонецФункции

// Выполняет асинхронную отправку сообщений в фоновом задании.
// Предназначена для использования в веб-клиенте при большом количестве сообщений.
//
// Параметры:
//  Параметры - Структура - Параметры выполнения:
//   * КоличествоСообщений - Число - Количество сообщений для отправки
//   * АдресХранилища - Строка - Адрес временного хранилища для передачи результата
//   * ИдентификаторГруппы - Строка - Идентификатор группы сообщений
//   * СервисИнтеграции - Строка - Имя сервиса интеграции для отправки
//   * КаналОтправки - Строка - Имя канала для отправки
//
Процедура ВыполнитьОтправкуСообщенийАсинхронно(Параметры) Экспорт
	
	// Проверяем входящие параметры
	ОбязательныеПоля = Новый Массив;
	ОбязательныеПоля.Добавить("КоличествоСообщений");
	ОбязательныеПоля.Добавить("АдресХранилища");
	ОбязательныеПоля.Добавить("СервисИнтеграции");
	ОбязательныеПоля.Добавить("КаналОтправки");
	ТМС_ОбщегоНазначенияКлиентСервер.ПроверитьОбязательныеПоля(Параметры, ОбязательныеПоля);
	
	КоличествоСообщений = Параметры.КоличествоСообщений;
	АдресХранилища = Параметры.АдресХранилища;
	ИдентификаторГруппы = ТМС_ОбщегоНазначенияКлиентСервер.БезопасноПолучитьЗначение(
		Параметры, "ИдентификаторГруппы", XMLСтрока(Новый УникальныйИдентификатор));
	СервисИнтеграции = Параметры.СервисИнтеграции;
	КаналОтправки = Параметры.КаналОтправки;
	
	// Результат выполнения
	РезультатВыполнения = Новый Структура("КоличествоОтправленных, ОписаниеОшибки", 0, "");
	
	// Выполняем отправку с промежуточным сохранением прогресса
	Для Счетчик = 1 По КоличествоСообщений Цикл
		
		Попытка
			// Генерируем тело сообщения
			СлучайноеТело = "Тело сообщения: " + XMLСтрока(Новый УникальныйИдентификатор);
			
			// Отправляем сообщение через сервис интеграции
			ОтправитьСообщениеЧерезСервисИнтеграции(СлучайноеТело, "Тестовое сообщение №" + Счетчик, 
				ИдентификаторГруппы, СервисИнтеграции, КаналОтправки);
			
			РезультатВыполнения.КоличествоОтправленных = РезультатВыполнения.КоличествоОтправленных + 1;
			
			// Каждые 10 сообщений сохраняем промежуточный прогресс
			Если Счетчик % 10 = 0 Тогда
				ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
			КонецЕсли;
			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ТекстОшибки = "Ошибка при отправке сообщения №" + Счетчик + ": " 
				+ ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			
			ЗаписьЖурналаРегистрации("ТМС_АсинхронноеВыполнение", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки);
			
			Если ПустаяСтрока(РезультатВыполнения.ОписаниеОшибки) Тогда
				РезультатВыполнения.ОписаниеОшибки = ТекстОшибки;
			КонецЕсли;
		КонецПопытки;
		
	КонецЦикла;
	
	// Сохраняем финальный результат
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Отправляет одно сообщение через сервис интеграции.
// Вспомогательная процедура для асинхронной отправки.
//
// Параметры:
//  ТелоСообщения - Строка - Содержимое сообщения
//  ЗаголовокСообщения - Строка - Заголовок сообщения  
//  ИдентификаторГруппы - Строка - Идентификатор группы сообщений
//  СервисИнтеграции - Строка - Имя сервиса интеграции для отправки
//  КаналОтправки - Строка - Имя канала для отправки
//
Процедура ОтправитьСообщениеЧерезСервисИнтеграции(ТелоСообщения, ЗаголовокСообщения, 
		ИдентификаторГруппы, СервисИнтеграции, КаналОтправки)
	
	// Создаем и отправляем сообщение (точно такая же логика, как в модуле формы)
	Сообщение = СервисыИнтеграции[СервисИнтеграции].СоздатьСообщение();
	Сообщение.ИдентификаторСообщенияЗапроса = Новый УникальныйИдентификатор();
	
	Тело = Сообщение.ПолучитьТелоКакПоток();
	Буфер = ПолучитьБуферДвоичныхДанныхИзСтроки(ТелоСообщения);
	Тело.Записать(Буфер, 0, Буфер.Размер);
	Тело.Закрыть();
	
	Сообщение.Параметры.Вставить("РазмерСообщения", Буфер.Размер);
	Сообщение.Параметры.Вставить("ДатаОтправки", Формат(ТекущаяДатаСеанса(), "ДФ=dd.MM.yyyy HH:mm:ss"));
	Сообщение.Параметры.Вставить("Описание", ЗаголовокСообщения);
	Сообщение.Параметры.Вставить("ТипСообщения", "Тестовое");
	Сообщение.Параметры.Вставить("ИдентификаторГруппы", ИдентификаторГруппы);
	
	СервисыИнтеграции[СервисИнтеграции][КаналОтправки].ОтправитьСообщение(Сообщение);
	
КонецПроцедуры

#КонецОбласти