require('dotenv').config();
const axios = require('axios');
const AMQPClient = require('amqp10').Client;
const amqpPolicy = require('amqp10').Policy;
const { formatAmqpUri } = require('./amqp-uri-helper');
const fs = require('fs');

const MOCK_API_URL = process.env.MOCK_API_URL || 'http://localhost:9090';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ OfficeToShop
const test_config = {
  applicationName: 'testAppE2e',
  processName: 'testProcessE2e',
  channelName: 'e2eOutQueue', // –ò—Å—Ö–æ–¥—è—â–∏–π –∫–∞–Ω–∞–ª (OfficeToShop)
  destination: 'OfficeToShop', // Destination –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ OfficeToShop
  maxMessages: 1000, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
  timeoutMs: 60000, // –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –≤ –º—Å (1 –º–∏–Ω—É—Ç–∞)
  batchReportSize: 10 // –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∫–∞–∂–¥—ã–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
};

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É (–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
 */
async function getTestEnvironment() {
  console.log('\n=== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é ===');
  
  try {
    // 1. –ù–∞–π—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ testAppE2e
    console.log(`–ü–æ–∏—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è "${test_config.applicationName}"...`);
    const appsResponse = await axios.get(`${MOCK_API_URL}/api/applications`);
    const apps = appsResponse.data.data || [];
    const application = apps.find(app => app.name === test_config.applicationName);
    
    if (!application) {
      throw new Error(`–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "${test_config.applicationName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ e2e-test.js –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã.`);
    }
    
    console.log(`‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: ID=${application._id}, clientSecret —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);

    // 2. –ü–æ–ª—É—á–∏—Ç—å id_token —á–µ—Ä–µ–∑ OIDC
    console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ id_token —á–µ—Ä–µ–∑ OIDC...');
    const base64data = Buffer.from(`${application.name}:${application.clientSecret}`, 'utf8').toString('base64');
    const params = new URLSearchParams();
    params.append('grant_type', 'client_credentials');
    
    const tokenResponse = await axios.post(
      `${MOCK_API_URL}/auth/oidc/token`,
      params,
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Authorization': 'Basic ' + base64data,
        },
      }
    );
    
    const id_token = tokenResponse.data.id_token;
    if (!id_token) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å id_token');
    }
    
    console.log('‚úÖ id_token –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ');

    // 3. –ü–æ–ª—É—á–∏—Ç—å runtime-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ runtime-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤...');
    const runtimeResponse = await axios.get(
      `${MOCK_API_URL}/applications/${test_config.applicationName}/sys/esb/runtime/channels`,
      {
        headers: {
          'Authorization': 'Bearer ' + id_token,
        },
      }
    );
    
    const runtime = runtimeResponse.data;
    if (!runtime.items || !runtime.items.length) {
      throw new Error('Runtime-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç–∞');
    }
    
    // –ù–∞–π—Ç–∏ destination –¥–ª—è OfficeToShop (–∏—Å—Ö–æ–¥—è—â–∏–π –∫–∞–Ω–∞–ª)
    const officeToShopChannel = runtime.items.find(item => item.destination === test_config.destination);
    if (!officeToShopChannel) {
      console.warn(`‚ö†Ô∏è –ö–∞–Ω–∞–ª —Å destination "${test_config.destination}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ runtime-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏`);
      console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:', runtime.items.map(item => item.destination));
    } else {
      console.log(`‚úÖ –ö–∞–Ω–∞–ª "${test_config.destination}" –Ω–∞–π–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω`);
    }

    return { application, id_token };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã:', error.message);
    if (error.response) {
      console.error('HTTP —Å—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('HTTP –¥–∞–Ω–Ω—ã–µ:', error.response.data);
    }
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ Jolokia API
 */
async function getQueueStatistics(destination) {
  try {
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏ "${destination}"...`);
    
    // –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ URL –¥–ª—è Jolokia API
    const jolokiaUrls = [
      // –í–∞—Ä–∏–∞–Ω—Ç 1: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å (–ø—Ä–æ–≤–µ—Ä–µ–Ω curl)
      `http://localhost:8161/console/jolokia/read/org.apache.activemq.artemis:broker="0.0.0.0",component=addresses,address="${destination}",subcomponent=queues,routing-type="anycast",queue="${destination}"/MessageCount`,
      // –í–∞—Ä–∏–∞–Ω—Ç 2: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∞–¥—Ä–µ—Å–∞
      `http://localhost:8161/console/jolokia/read/org.apache.activemq.artemis:address="${destination}",broker="0.0.0.0",component=addresses,queue="${destination}",routing-type="anycast",subcomponent=queues/MessageCount`,
      // –í–∞—Ä–∏–∞–Ω—Ç 3: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—É—Ç—å
      `http://localhost:8161/console/jolokia/read/org.apache.activemq.artemis:broker="0.0.0.0",component=addresses,address="${destination}"/MessageCount`
    ];
    
    const authHeaders = [
      'YXJ0ZW1pczphcnRlbWlz', // artemis:artemis
      'YWRtaW46YWRtaW4=',     // admin:admin
    ];
    
    for (const baseUrl of jolokiaUrls) {
      for (const auth of authHeaders) {
        try {
          console.log(`  üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${baseUrl.split('/jolokia/')[0]}/jolokia/...`);
          
          const jolokiaResponse = await axios.get(baseUrl, {
            headers: {
              'Authorization': `Basic ${auth}`,
              'Accept': 'application/json'
            },
            timeout: 3000
          });
          
          if (jolokiaResponse.data && typeof jolokiaResponse.data.value === 'number') {
            const messageCount = jolokiaResponse.data.value;
            console.log(`üìà –°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ "${destination}": ${messageCount}`);
            return messageCount;
          }
          
        } catch (urlError) {
          console.log(`    ‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ: ${urlError.response?.status || urlError.message}`);
          continue;
        }
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
    console.log(`‚ö†Ô∏è Jolokia API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥...`);
    return await getQueueStatisticsAlternative(destination);
    
  } catch (error) {
    console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏ "${destination}":`, error.message);
    return null;
  }
}

/**
 * –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ REST API mock-—Å–µ—Ä–≤–∏—Å–∞
 */
async function getQueueStatisticsAlternative(destination) {
  try {
    console.log(`üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ mock-—Å–µ—Ä–≤–∏—Å API...`);
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–∞—à mock API
    const response = await axios.get(`${MOCK_API_URL}/api/applications/${test_config.applicationName}/channels`, {
      timeout: 3000
    });
    
    if (response.data && response.data.data) {
      const channels = response.data.data;
      const channel = channels.find(ch => ch.destination === destination);
      
      if (channel) {
        console.log(`üìã –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: ${channel.name} -> ${channel.destination}`);
        console.log(`‚ÑπÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ API, –Ω–æ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        return 0; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
      }
    }
    
    console.log(`‚ö†Ô∏è –ö–∞–Ω–∞–ª —Å destination "${destination}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    return null;
    
  } catch (error) {
    console.warn(`‚ö†Ô∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error.message);
    return null;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ OfficeToShop
 */
async function receiveMessages(id_token, destination, maxMessages, timeoutMs, batchReportSize) {
  console.log(`\n=== –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ OfficeToShop ("${destination}") ===`);
  console.log(`–ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π: ${maxMessages}`);
  console.log(`–¢–∞–π–º–∞—É—Ç: ${timeoutMs} –º—Å`);
  
  const hostname = process.env.AMQP_HOST || 'localhost';
  const port = 6698;
  
  // –§–æ—Ä–º–∏—Ä—É–µ–º AMQP URI –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º—É —Ö–æ—Å—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  const uri = formatAmqpUri({
    hostname,
    port,
    vhost: `/applications/${test_config.applicationName}`,
    username: id_token,
    password: id_token,
    frameMax: 1000000,
    channelMax: 7000,
    heartbeat: 6000,
    locale: 'en_EN',
  });

  console.log('[DEBUG] AMQP URI:', uri);
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ AMQP –±—Ä–æ–∫–µ—Ä—É
  const client = new AMQPClient(amqpPolicy.ActiveMQ);
  await client.connect(uri, { saslMechanism: 'PLAIN' });
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ AMQP-–±—Ä–æ–∫–µ—Ä—É');
  
  // –°–æ–∑–¥–∞–µ–º receiver –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
  const receiverLink = await client.createReceiver(destination, { 
    source: { address: destination, capabilities: ['queue'] },
    creditWindow: 100 // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
  });
  console.log(`‚úÖ Receiver —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ "${destination}"`);

  // –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const startTime = Date.now();
  let receivedCount = 0;
  let errorCount = 0;
  let processedMessages = [];
  let isReceiving = true;
  let firstMessageTime = null;
  let lastMessageTime = null;

  // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
  const timeStats = {
    minProcessingTime: Infinity,
    maxProcessingTime: 0,
    totalProcessingTime: 0,
    processingTimes: []
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
  receiverLink.on('message', async (message) => {
    const messageReceiveTime = Date.now();
    
    if (!firstMessageTime) {
      firstMessageTime = messageReceiveTime;
      console.log('üéØ –ü–æ–ª—É—á–µ–Ω–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
    }
    
    try {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      const processingStartTime = Date.now();
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageData = {
        index: receivedCount + 1,
        receivedAt: new Date(messageReceiveTime).toISOString(),
        body: message.body,
        properties: message.properties || {},
        header: message.header || {},
        messageId: message.properties?.messageId || `msg_${receivedCount + 1}`,
        timestamp: message.properties?.timestamp || message.header?.timestamp
      };
      
      // –≠–º—É–ª—è—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É)
      await new Promise(resolve => setTimeout(resolve, 1)); // 1–º—Å –∑–∞–¥–µ—Ä–∂–∫–∞
      
      const processingEndTime = Date.now();
      const processingTime = processingEndTime - processingStartTime;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Ä–µ–º–µ–Ω–∏
      timeStats.totalProcessingTime += processingTime;
      timeStats.processingTimes.push(processingTime);
      if (processingTime < timeStats.minProcessingTime) {
        timeStats.minProcessingTime = processingTime;
      }
      if (processingTime > timeStats.maxProcessingTime) {
        timeStats.maxProcessingTime = processingTime;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
      processedMessages.push({
        ...messageData,
        processingTime,
        processingStartTime,
        processingEndTime
      });
      
      receivedCount++;
      lastMessageTime = messageReceiveTime;
      
      // –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
      if (receivedCount % batchReportSize === 0) {
        const currentTime = Date.now();
        const elapsedTime = currentTime - startTime;
        const avgSpeed = (receivedCount / elapsedTime) * 1000;
        console.log(`  üìà –ü–æ–ª—É—á–µ–Ω–æ: ${receivedCount} —Å–æ–æ–±—â–µ–Ω–∏–π | –°–∫–æ—Ä–æ—Å—Ç—å: ${avgSpeed.toFixed(2)} —Å–æ–æ–±—â/—Å–µ–∫ | –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${processingTime}–º—Å`);
      }
      
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (acknowledge)
      await receiverLink.accept(message);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      if (receivedCount >= maxMessages) {
        console.log(`üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${maxMessages}`);
        isReceiving = false;
        await receiverLink.detach();
      }
      
    } catch (err) {
      errorCount++;
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${receivedCount + 1}:`, err.message);
      try {
        // –û—Ç–∫–ª–æ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await receiverLink.release(message);
      } catch (releaseErr) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:`, releaseErr.message);
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ receiver
  receiverLink.on('errorReceived', (err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ receiver:', err.message);
    errorCount++;
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è receiver
  receiverLink.on('detached', () => {
    console.log('üîå Receiver –æ—Ç–∫–ª—é—á–µ–Ω');
    isReceiving = false;
  });

  console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º ${timeoutMs/1000} —Å–µ–∫—É–Ω–¥)...`);

  // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞
  const timeoutPromise = new Promise((resolve) => {
    setTimeout(() => {
      if (isReceiving) {
        console.log('‚è∞ –î–æ—Å—Ç–∏–≥–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π');
        isReceiving = false;
        resolve();
      }
    }, timeoutMs);
  });

  const receivePromise = new Promise((resolve) => {
    const checkInterval = setInterval(() => {
      if (!isReceiving) {
        clearInterval(checkInterval);
        resolve();
      }
    }, 1000);
  });

  await Promise.race([receivePromise, timeoutPromise]);

  // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  try {
    if (receiverLink && !receiverLink.isClosed()) {
      await receiverLink.detach();
    }
  } catch (err) {
    console.warn('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ receiver:', err.message);
  }

  await client.disconnect();
  console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç AMQP-–±—Ä–æ–∫–µ—Ä–∞');

  // –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const endTime = Date.now();
  const totalTime = endTime - startTime;
  const messagesPerSecond = receivedCount > 0 ? (receivedCount / totalTime) * 1000 : 0;
  const avgProcessingTime = receivedCount > 0 ? timeStats.totalProcessingTime / receivedCount : 0;

  console.log('\n=== üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–õ–£–ß–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô ===');
  console.log(`‚úÖ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: ${receivedCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
  console.log(`‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
  console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime} –º—Å (${(totalTime/1000).toFixed(2)} —Å–µ–∫)`);
  console.log(`üöÄ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${messagesPerSecond.toFixed(2)} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫`);
  console.log(`‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${avgProcessingTime.toFixed(2)} –º—Å`);
  
  if (receivedCount > 0) {
    console.log(`üìè –ú–∏–Ω. –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${timeStats.minProcessingTime} –º—Å`);
    console.log(`üìè –ú–∞–∫—Å. –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${timeStats.maxProcessingTime} –º—Å`);
    
    if (firstMessageTime && lastMessageTime) {
      const messageSpan = lastMessageTime - firstMessageTime;
      console.log(`üìÖ –í—Ä–µ–º—è –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${messageSpan} –º—Å`);
    }
  }

  return {
    receivedCount,
    errorCount,
    totalTime,
    messagesPerSecond,
    avgProcessingTime,
    timeStats,
    processedMessages,
    firstMessageTime,
    lastMessageTime
  };
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –≤ —Ñ–∞–π–ª—ã
 */
async function saveResults(results) {
  console.log('\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
  
  const timestamp = new Date().toISOString();
  const resultsData = {
    timestamp,
    testType: 'office-to-shop-consumer',
    config: test_config,
    ...results
  };
  
  // –£–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
  const summaryData = { ...resultsData };
  delete summaryData.processedMessages;
  delete summaryData.timeStats.processingTimes;
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const summaryFilename = `office-to-shop-results-${Date.now()}.json`;
  fs.writeFileSync(summaryFilename, JSON.stringify(summaryData, null, 2));
  console.log(`üìÑ –ö—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${summaryFilename}`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
  if (results.processedMessages && results.processedMessages.length > 0) {
    const messagesData = {
      timestamp,
      messageCount: results.processedMessages.length,
      messages: results.processedMessages.slice(0, 100), // –ü–µ—Ä–≤—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      allProcessingTimes: results.timeStats.processingTimes
    };
    
    const detailsFilename = `office-to-shop-messages-${Date.now()}.json`;
    fs.writeFileSync(detailsFilename, JSON.stringify(messagesData, null, 2));
    console.log(`üìã –î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ${detailsFilename}`);
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
 */
async function runOfficeToShopConsumerTest() {
  try {
    console.log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô –ò–ó –û–ß–ï–†–ï–î–ò OfficeToShop');
    console.log(`üéØ –¶–µ–ª—å: –ø–æ–ª—É—á–∏—Ç—å –¥–æ ${test_config.maxMessages} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ OfficeToShop ("${test_config.destination}")`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
    const initialQueueStats = await getQueueStatistics(test_config.destination);
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥–µ
    const { id_token } = await getTestEnvironment();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    const results = await receiveMessages(
      id_token, 
      test_config.destination, 
      test_config.maxMessages, 
      test_config.timeoutMs, 
      test_config.batchReportSize
    );

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏
    const finalQueueStats = await getQueueStatistics(test_config.destination);
    
    // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if (initialQueueStats !== null || finalQueueStats !== null) {
      console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏:`);
      
      if (initialQueueStats !== null && finalQueueStats !== null) {
        const consumedFromQueue = initialQueueStats - finalQueueStats;
        console.log(`   –î–æ —Ç–µ—Å—Ç–∞: ${initialQueueStats} —Å–æ–æ–±—â–µ–Ω–∏–π`);
        console.log(`   –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞: ${finalQueueStats} —Å–æ–æ–±—â–µ–Ω–∏–π`);
        console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: ${consumedFromQueue} —Å–æ–æ–±—â–µ–Ω–∏–π`);
        
        if (consumedFromQueue !== results.receivedCount) {
          console.warn(`‚ö†Ô∏è –†–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ: –ø–æ–ª—É—á–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º ${results.receivedCount}, –∞ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —É–¥–∞–ª–µ–Ω–æ ${consumedFromQueue}`);
        } else {
          console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${consumedFromQueue} —Å–æ–æ–±—â–µ–Ω–∏–π`);
        }
      } else {
        console.log(`   ‚ÑπÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ Jolokia API`);
        console.log(`   üìã –ü–æ–ª—É—á–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–º: ${results.receivedCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
        console.log(`   üí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∫–æ–Ω—Å–æ–ª—å Artemis: http://localhost:8161`);
      }
    } else {
      console.log(`\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç: –ø–æ–ª—É—á–µ–Ω–æ ${results.receivedCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
      console.log(`‚ÑπÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ–±-–∫–æ–Ω—Å–æ–ª—å Artemis: http://localhost:8161`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await saveResults(results);

    console.log('\n‚úÖ –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!');
    
    if (results.receivedCount === 0) {
      console.log('\nüí° –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   ‚Ä¢ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞');
      console.log('   ‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –±—ã–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã');
      console.log('   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±—Ä–æ–∫–µ—Ä—É');
      console.log('   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π destination –∏–ª–∏ –∫–∞–Ω–∞–ª');
    }

  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –í –•–û–î–ï –¢–ï–°–¢–ê:');
    if (error.response) {
      console.error('HTTP —Å—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('HTTP –¥–∞–Ω–Ω—ã–µ:', error.response.data);
    } else {
      console.error(error.message);
    }
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  runOfficeToShopConsumerTest();
}

module.exports = { 
  runOfficeToShopConsumerTest, 
  test_config,
  getTestEnvironment,
  receiveMessages 
};