require('dotenv').config();
const { runPerformanceTest } = require('./performance-producer');
const { runPerformanceConsumerTest } = require('./performance-consumer');
const fs = require('fs');

async function runFullPerformanceTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
  console.log('==========================================');
  
  const startTime = Date.now();
  
  try {
    // –®–∞–≥ 1: –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥—é—Å–µ—Ä–∞
    console.log('\nüì§ –®–ê–ì 1: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π');
    console.log('============================');
    await runPerformanceTest();
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    console.log('\n‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –®–∞–≥ 2: –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å—å—é–º–µ—Ä–∞
    console.log('\nüì• –®–ê–ì 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π');
    console.log('==============================');
    await runPerformanceConsumerTest();
    
    // –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìä –®–ê–ì 3: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
    console.log('=============================');
    await analyzeFullResults();
    
    const totalTime = Date.now() - startTime;
    console.log(`\n‚úÖ –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${totalTime} –º—Å`);
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ö–æ–¥–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:', error.message);
    process.exit(1);
  }
}

async function analyzeFullResults() {
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–¥—é—Å–µ—Ä–∞
    let producerResults = null;
    if (fs.existsSync('performance-producer-results.json')) {
      const producerData = fs.readFileSync('performance-producer-results.json', 'utf8');
      producerResults = JSON.parse(producerData);
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω—Å—å—é–º–µ—Ä–∞
    let consumerResults = null;
    if (fs.existsSync('performance-consumer-results.json')) {
      const consumerData = fs.readFileSync('performance-consumer-results.json', 'utf8');
      consumerResults = JSON.parse(consumerData);
    }
    
    if (!producerResults || !consumerResults) {
      console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
      return;
    }
    
    console.log('\nüìà –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò');
    console.log('=====================================');
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    console.log(`üì§ –ü–†–û–î–Æ–°–ï–†:`);
    console.log(`   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${producerResults.sentCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    console.log(`   –í—Ä–µ–º—è: ${producerResults.totalTime} –º—Å`);
    console.log(`   –°–∫–æ—Ä–æ—Å—Ç—å: ${producerResults.messagesPerSecond.toFixed(2)} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫`);
    console.log(`   –û—à–∏–±–æ–∫: ${producerResults.errorCount}`);
    
    console.log(`\nüì• –ö–û–ù–°–¨–Æ–ú–ï–†:`);
    console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: ${consumerResults.receivedCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    console.log(`   –í—Ä–µ–º—è: ${consumerResults.totalTime} –º—Å`);
    console.log(`   –°–∫–æ—Ä–æ—Å—Ç—å: ${consumerResults.messagesPerSecond.toFixed(2)} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫`);
    console.log(`   –û—à–∏–±–æ–∫: ${consumerResults.errorCount}`);
    
    // –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    console.log(`\n‚öñÔ∏è  –°–†–ê–í–ù–ï–ù–ò–ï:`);
    const speedRatio = consumerResults.messagesPerSecond / producerResults.messagesPerSecond;
    const messageLoss = producerResults.sentCount - consumerResults.receivedCount;
    const lossPercentage = (messageLoss / producerResults.sentCount) * 100;
    
    console.log(`   –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–µ–π: ${speedRatio.toFixed(2)}`);
    console.log(`   –ü–æ—Ç–µ—Ä—è —Å–æ–æ–±—â–µ–Ω–∏–π: ${messageLoss} (${lossPercentage.toFixed(2)}%)`);
    
    // –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    console.log(`\nüèÜ –û–¶–ï–ù–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:`);
    
    if (speedRatio > 1.2) {
      console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (${speedRatio.toFixed(2)}x)`);
    } else if (speedRatio > 1.0) {
      console.log(`   ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–µ–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (${speedRatio.toFixed(2)}x)`);
    } else if (speedRatio > 0.8) {
      console.log(`   ‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (${speedRatio.toFixed(2)}x)`);
    } else {
      console.log(`   ‚ùå –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (${speedRatio.toFixed(2)}x)`);
    }
    
    if (messageLoss === 0) {
      console.log(`   ‚úÖ –ü–æ—Ç–µ—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
    } else if (lossPercentage < 1) {
      console.log(`   ‚ö†Ô∏è  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (${lossPercentage.toFixed(2)}%)`);
    } else {
      console.log(`   ‚ùå –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (${lossPercentage.toFixed(2)}%)`);
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`);
    
    if (speedRatio < 0.9) {
      console.log(`   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è`);
      console.log(`   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AMQP –∫–ª–∏–µ–Ω—Ç–∞`);
      console.log(`   ‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—å—é–º–µ—Ä–æ–≤`);
    }
    
    if (messageLoss > 0) {
      console.log(`   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –≤ Artemis`);
      console.log(`   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫`);
      console.log(`   ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
    }
    
    if (producerResults.messagesPerSecond < 100) {
      console.log(`   ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∏–∑–∫–∞—è, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏`);
    }
    
    if (consumerResults.messagesPerSecond < 100) {
      console.log(`   ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∏–∑–∫–∞—è, –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    const summaryReport = {
      timestamp: new Date().toISOString(),
      testType: 'full_performance',
      producer: {
        sentCount: producerResults.sentCount,
        totalTime: producerResults.totalTime,
        messagesPerSecond: producerResults.messagesPerSecond,
        errorCount: producerResults.errorCount
      },
      consumer: {
        receivedCount: consumerResults.receivedCount,
        totalTime: consumerResults.totalTime,
        messagesPerSecond: consumerResults.messagesPerSecond,
        errorCount: consumerResults.errorCount
      },
      analysis: {
        speedRatio: speedRatio,
        messageLoss: messageLoss,
        lossPercentage: lossPercentage,
        overallPerformance: speedRatio > 0.9 && messageLoss === 0 ? 'excellent' : 
                           speedRatio > 0.8 && lossPercentage < 1 ? 'good' : 'needs_improvement'
      },
      config: producerResults.config
    };
    
    fs.writeFileSync('performance-full-report.json', JSON.stringify(summaryReport, null, 2));
    console.log(`\nüíæ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ performance-full-report.json`);
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  runFullPerformanceTest();
}

module.exports = { runFullPerformanceTest, analyzeFullResults }; 