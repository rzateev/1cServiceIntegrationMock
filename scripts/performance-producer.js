require('dotenv').config();
const axios = require('axios');
const AMQPClient = require('amqp10').Client;
const amqpPolicy = require('amqp10').Policy;
const { formatAmqpUri } = require('./amqp-uri-helper');

const MOCK_API_URL = process.env.MOCK_API_URL || 'http://localhost:9090';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
const performance_test = {
  applicationName: 'performanceTestApp',
  processName: 'performanceTestProcess',
  channelName: 'performanceQueue',
  destination: 'PerformanceQueue',
  messageCount: 5000,
  batchSize: 100, // –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
  delayBetweenBatches: 10 // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –≤ –º—Å
};

async function cleanup() {
  console.log('\n=== –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö ===');
  try {
    // –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    await axios.delete(`${MOCK_API_URL}/api/applications/by-name/${performance_test.applicationName}`).catch(() => {});
    console.log('–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
  } catch (err) {
    console.log('–û—á–∏—Å—Ç–∫–∞ –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–∞—Å—å');
  }
}

async function createTestEnvironment() {
  console.log('\n=== –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã ===');
  
  // 1. –°–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
  const appResponse = await axios.post(`${MOCK_API_URL}/api/applications`, {
    name: performance_test.applicationName,
    description: '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
    clientSecret: 'perf-secret-123',
  });
  const application = appResponse.data.data;
  console.log(`–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "${application.name}" —Å–æ–∑–¥–∞–Ω–æ —Å ID: ${application._id}`);

  // 2. –ü–æ–ª—É—á–∏—Ç—å id_token
  console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ id_token...');
  const base64data = Buffer.from(`${application.name}:${application.clientSecret}`, 'utf8').toString('base64');
  const params = new URLSearchParams();
  params.append('grant_type', 'client_credentials');
  const tokenResponse = await axios.post(
    `${MOCK_API_URL}/auth/oidc/token`,
    params,
    {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Authorization': 'Basic ' + base64data,
      },
    }
  );
  const id_token = tokenResponse.data.id_token;
  console.log('id_token –ø–æ–ª—É—á–µ–Ω');

  // 3. –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞...');
  const processResponse = await axios.post(`${MOCK_API_URL}/api/processes`, {
    name: performance_test.processName,
    applicationId: application._id,
  });
  const processData = processResponse.data.data;
  console.log(`–ü—Ä–æ—Ü–µ—Å—Å "${processData.name}" —Å–æ–∑–¥–∞–Ω —Å ID: ${processData._id}`);

  // 4. –°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª
  console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞...');
  const channelResponse = await axios.post(`${MOCK_API_URL}/api/channels`, {
    name: performance_test.channelName,
    destination: performance_test.destination,
    processId: processData._id,
    direction: 'outbound',
  });
  const channel = channelResponse.data.data;
  console.log(`–ö–∞–Ω–∞–ª "${channel.name}" —Å–æ–∑–¥–∞–Ω —Å ID: ${channel._id}`);

  // –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  await new Promise(r => setTimeout(r, 500));

  return { application, processData, channel, id_token };
}

function generateRandomMessage(index) {
  const messages = [
    `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Ññ${index} - ${new Date().toISOString()}`,
    `Performance test message ${index} at ${Date.now()}`,
    `–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ${index}`,
    `Message ${index}: ${Math.random().toString(36).substring(7)}`,
    `Test data ${index}: ${Buffer.from(Math.random().toString()).toString('base64').substring(0, 20)}`
  ];
  
  return messages[index % messages.length];
}

async function sendMessages(id_token, destination, messageCount, batchSize, delayBetweenBatches) {
  console.log(`\n=== –û—Ç–ø—Ä–∞–≤–∫–∞ ${messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π ===`);
  
  const hostname = process.env.AMQP_HOST || 'localhost';
  const port = 6698;
  
  const uri = formatAmqpUri({
    hostname,
    port,
    vhost: `/applications/${performance_test.applicationName}`,
    username: id_token,
    password: id_token,
    frameMax: 1000000,
    channelMax: 7000,
    heartbeat: 6000,
    locale: 'en_EN',
  });

  console.log('[DEBUG] AMQP URI:', uri);
  
  const client = new AMQPClient(amqpPolicy.ActiveMQ);
  await client.connect(uri, { saslMechanism: 'PLAIN' });
  
  const senderLink = await client.createSender(destination, { 
    target: { address: destination, capabilities: ['queue'] } 
  });

  const startTime = Date.now();
  let sentCount = 0;
  let errorCount = 0;

  console.log(`–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É ${messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ ${batchSize}...`);

  for (let batch = 0; batch < Math.ceil(messageCount / batchSize); batch++) {
    const batchStart = batch * batchSize;
    const batchEnd = Math.min(batchStart + batchSize, messageCount);
    const currentBatchSize = batchEnd - batchStart;

    console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ ${batch + 1}/${Math.ceil(messageCount / batchSize)} (—Å–æ–æ–±—â–µ–Ω–∏—è ${batchStart + 1}-${batchEnd})...`);

    const promises = [];
    for (let i = batchStart; i < batchEnd; i++) {
      const message = {
        body: generateRandomMessage(i + 1),
        header: { 
          durable: true,
          messageId: `msg-${i + 1}-${Date.now()}`,
          timestamp: Date.now()
        },
        properties: {
          messageIndex: i + 1,
          batchNumber: batch + 1,
          sentAt: new Date().toISOString()
        }
      };

      promises.push(
        senderLink.send(message)
          .then(() => {
            sentCount++;
            if (sentCount % 100 === 0) {
              console.log(`  –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sentCount}/${messageCount}`);
            }
          })
          .catch(err => {
            errorCount++;
            console.error(`  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${i + 1}:`, err.message);
          })
      );
    }

    await Promise.all(promises);

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
    if (batch < Math.ceil(messageCount / batchSize) - 1) {
      await new Promise(r => setTimeout(r, delayBetweenBatches));
    }
  }

  const endTime = Date.now();
  const totalTime = endTime - startTime;
  const messagesPerSecond = (sentCount / totalTime) * 1000;

  console.log('\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ ===');
  console.log(`–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${sentCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
  console.log(`–û—à–∏–±–æ–∫: ${errorCount}`);
  console.log(`–û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime} –º—Å`);
  console.log(`–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${messagesPerSecond.toFixed(2)} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫`);
  console.log(`–í—Ä–µ–º—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${(totalTime / sentCount).toFixed(2)} –º—Å`);

  await client.disconnect();
  console.log('–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç AMQP-–±—Ä–æ–∫–µ—Ä–∞');

  return {
    sentCount,
    errorCount,
    totalTime,
    messagesPerSecond
  };
}

async function runPerformanceTest() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
    console.log(`–¶–µ–ª—å: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ${performance_test.messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    await cleanup();
    const { id_token } = await createTestEnvironment();
    
    const results = await sendMessages(
      id_token, 
      performance_test.destination, 
      performance_test.messageCount, 
      performance_test.batchSize, 
      performance_test.delayBetweenBatches
    );

    console.log('\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${results.sentCount}`);
    console.log(`   –û—à–∏–±–æ–∫: ${results.errorCount}`);
    console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${results.totalTime} –º—Å`);
    console.log(`   –°–∫–æ—Ä–æ—Å—Ç—å: ${results.messagesPerSecond.toFixed(2)} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª –¥–ª—è –∫–æ–Ω—Å—å—é–º–µ—Ä–∞
    const fs = require('fs');
    const resultsData = {
      timestamp: new Date().toISOString(),
      testType: 'producer',
      ...results,
      config: performance_test
    };
    fs.writeFileSync('performance-producer-results.json', JSON.stringify(resultsData, null, 2));
    console.log('\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ performance-producer-results.json');

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ö–æ–¥–µ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ:', error.response.data);
    } else {
      console.error(error.message);
    }
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  runPerformanceTest();
}

module.exports = { runPerformanceTest, performance_test }; 