require('dotenv').config();
const axios = require('axios');
const AMQPClient = require('amqp10').Client;
const amqpPolicy = require('amqp10').Policy;
const { formatAmqpUri } = require('./amqp-uri-helper');
const fs = require('fs');

const MOCK_API_URL = process.env.MOCK_API_URL || 'http://localhost:9090';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –ø—Ä–æ–¥—é—Å–µ—Ä–æ–º)
const performance_test = {
  applicationName: 'performanceTestApp',
  processName: 'performanceTestProcess',
  channelName: 'performanceQueue',
  destination: 'PerformanceQueue',
  expectedMessageCount: 5000,
  batchSize: 100, // –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  processingDelay: 0 // –ó–∞–¥–µ—Ä–∂–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º—Å
};

async function getTestEnvironment() {
  console.log('\n=== –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã ===');
  
  try {
    // 1. –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    const appsResponse = await axios.get(`${MOCK_API_URL}/api/applications`);
    const apps = appsResponse.data.data || [];
    const application = apps.find(app => app.name === performance_test.applicationName);
    
    if (!application) {
      throw new Error(`–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ${performance_test.applicationName} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
    }
    
    console.log(`–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "${application.name}" –Ω–∞–π–¥–µ–Ω–æ —Å ID: ${application._id}`);

    // 2. –ü–æ–ª—É—á–∏—Ç—å id_token
    console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ id_token...');
    const base64data = Buffer.from(`${application.name}:${application.clientSecret}`, 'utf8').toString('base64');
    const params = new URLSearchParams();
    params.append('grant_type', 'client_credentials');
    const tokenResponse = await axios.post(
      `${MOCK_API_URL}/auth/oidc/token`,
      params,
      {
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'Authorization': 'Basic ' + base64data,
        },
      }
    );
    const id_token = tokenResponse.data.id_token;
    console.log('id_token –ø–æ–ª—É—á–µ–Ω');

    return { application, id_token };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã:', error.message);
    throw new Error('–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ performance-producer.js');
  }
}

async function getQueueStatistics(destination) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏ —á–µ—Ä–µ–∑ Jolokia
    const jolokiaResponse = await axios.get(
      `http://localhost:8161/console/jolokia/read/org.apache.activemq.artemis:broker="0.0.0.0",component=addresses,address="${destination}",subcomponent=queues,queue="${destination}"/MessageCount`,
      {
        headers: {
          'Authorization': 'Basic YWRtaW46YWRtaW4='
        }
      }
    );
    
    const messageCount = jolokiaResponse.data.value;
    console.log(`üìä –°–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥–∏ ${destination}: ${messageCount}`);
    return messageCount;
  } catch (error) {
    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏:', error.message);
    return null;
  }
}

async function receiveMessages(id_token, destination, expectedMessageCount, batchSize, processingDelay) {
  console.log(`\n=== –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏ ${destination} ===`);
  
  const hostname = process.env.AMQP_HOST || 'localhost';
  const port = 6698;
  
  const uri = formatAmqpUri({
    hostname,
    port,
    vhost: `/applications/${performance_test.applicationName}`,
    username: id_token,
    password: id_token,
    frameMax: 1000000,
    channelMax: 7000,
    heartbeat: 6000,
    locale: 'en_EN',
  });

  console.log('[DEBUG] AMQP URI:', uri);
  
  const client = new AMQPClient(amqpPolicy.ActiveMQ);
  await client.connect(uri, { saslMechanism: 'PLAIN' });
  
  const receiverLink = await client.createReceiver(destination, { 
    source: { address: destination, capabilities: ['queue'] } 
  });

  const startTime = Date.now();
  let receivedCount = 0;
  let errorCount = 0;
  let processedMessages = [];
  let isReceiving = true;

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
  receiverLink.on('message', async (message) => {
    try {
      const messageIndex = message.properties?.messageIndex || receivedCount + 1;
      const receivedAt = new Date().toISOString();
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (processingDelay > 0) {
        await new Promise(r => setTimeout(r, processingDelay));
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
      processedMessages.push({
        index: messageIndex,
        receivedAt,
        body: message.body,
        properties: message.properties,
        header: message.header
      });
      
      receivedCount++;
      
      // –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
      if (receivedCount % 100 === 0) {
        console.log(`  –ü–æ–ª—É—á–µ–Ω–æ: ${receivedCount}/${expectedMessageCount}`);
      }
      
      // –ü—Ä–∏–Ω–∏–º–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await receiverLink.accept(message);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–∏–ª–∏ –ª–∏ –º—ã –≤—Å–µ –æ–∂–∏–¥–∞–µ–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
      if (receivedCount >= expectedMessageCount) {
        isReceiving = false;
        await receiverLink.detach();
      }
      
    } catch (err) {
      errorCount++;
      console.error(`  –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:`, err.message);
      try {
        await receiverLink.release(message);
      } catch (releaseErr) {
        console.error(`  –û—à–∏–±–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:`, releaseErr.message);
      }
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
  receiverLink.on('errorReceived', (err) => {
    console.error('–û—à–∏–±–∫–∞ receiver:', err);
    errorCount++;
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
  receiverLink.on('detached', () => {
    console.log('Receiver –æ—Ç–∫–ª—é—á–µ–Ω');
  });

  console.log(`–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...`);
  console.log(`–û–∂–∏–¥–∞–µ–º ${expectedMessageCount} —Å–æ–æ–±—â–µ–Ω–∏–π...`);

  // –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
  const timeout = 300000; // 5 –º–∏–Ω—É—Ç
  const timeoutPromise = new Promise((resolve) => {
    setTimeout(() => {
      if (isReceiving) {
        console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π');
        isReceiving = false;
        resolve();
      }
    }, timeout);
  });

  const receivePromise = new Promise((resolve) => {
    const checkInterval = setInterval(() => {
      if (!isReceiving) {
        clearInterval(checkInterval);
        resolve();
      }
    }, 1000);
  });

  await Promise.race([receivePromise, timeoutPromise]);

  const endTime = Date.now();
  const totalTime = endTime - startTime;
  const messagesPerSecond = (receivedCount / totalTime) * 1000;

  console.log('\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω–∏—è ===');
  console.log(`–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: ${receivedCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
  console.log(`–û—à–∏–±–æ–∫: ${errorCount}`);
  console.log(`–û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime} –º—Å`);
  console.log(`–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: ${messagesPerSecond.toFixed(2)} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫`);
  console.log(`–í—Ä–µ–º—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${(totalTime / receivedCount).toFixed(2)} –º—Å`);

  await client.disconnect();
  console.log('–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç AMQP-–±—Ä–æ–∫–µ—Ä–∞');

  return {
    receivedCount,
    errorCount,
    totalTime,
    messagesPerSecond,
    processedMessages
  };
}

async function analyzeResults(producerResults, consumerResults) {
  console.log('\n=== –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===');
  
  if (producerResults && consumerResults) {
    const producerSpeed = producerResults.messagesPerSecond;
    const consumerSpeed = consumerResults.messagesPerSecond;
    const speedRatio = consumerSpeed / producerSpeed;
    
    console.log(`üìà –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏: ${producerSpeed.toFixed(2)} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫`);
    console.log(`üìâ –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è: ${consumerSpeed.toFixed(2)} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫`);
    console.log(`‚öñÔ∏è  –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–µ–π: ${speedRatio.toFixed(2)}`);
    
    if (speedRatio > 1.1) {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –±—ã—Å—Ç—Ä–µ–µ –æ—Ç–ø—Ä–∞–≤–∫–∏');
    } else if (speedRatio < 0.9) {
      console.log('‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–∫–∏');
    } else {
      console.log('üîÑ –°–∫–æ—Ä–æ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã');
    }
  }
  
  const messageLoss = (producerResults?.sentCount || 0) - (consumerResults?.receivedCount || 0);
  if (messageLoss > 0) {
    console.log(`‚ö†Ô∏è  –ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messageLoss}`);
  } else {
    console.log('‚úÖ –ü–æ—Ç–µ—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
  }
}

async function runPerformanceConsumerTest() {
  try {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π');
    console.log(`–¶–µ–ª—å: –ø–æ–ª—É—á–∏—Ç—å ${performance_test.expectedMessageCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏
    const queueStats = await getQueueStatistics(performance_test.destination);
    if (queueStats !== null && queueStats < performance_test.expectedMessageCount) {
      console.warn(`‚ö†Ô∏è  –í –æ—á–µ—Ä–µ–¥–∏ —Ç–æ–ª—å–∫–æ ${queueStats} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ–∂–∏–¥–∞–µ–º—ã—Ö ${performance_test.expectedMessageCount}`);
    }
    
    const { id_token } = await getTestEnvironment();
    
    const results = await receiveMessages(
      id_token, 
      performance_test.destination, 
      performance_test.expectedMessageCount, 
      performance_test.batchSize, 
      performance_test.processingDelay
    );

    console.log('\n‚úÖ –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${results.receivedCount}`);
    console.log(`   –û—à–∏–±–æ–∫: ${results.errorCount}`);
    console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${results.totalTime} –º—Å`);
    console.log(`   –°–∫–æ—Ä–æ—Å—Ç—å: ${results.messagesPerSecond.toFixed(2)} —Å–æ–æ–±—â–µ–Ω–∏–π/—Å–µ–∫`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–¥—é—Å–µ—Ä–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    let producerResults = null;
    try {
      if (fs.existsSync('performance-producer-results.json')) {
        const producerData = fs.readFileSync('performance-producer-results.json', 'utf8');
        producerResults = JSON.parse(producerData);
        console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–¥—é—Å–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      }
    } catch (err) {
      console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–¥—é—Å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await analyzeResults(producerResults, results);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const resultsData = {
      timestamp: new Date().toISOString(),
      testType: 'consumer',
      ...results,
      config: performance_test,
      producerResults: producerResults
    };
    
    // –£–±–∏—Ä–∞–µ–º processedMessages –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º)
    delete resultsData.processedMessages;
    
    fs.writeFileSync('performance-consumer-results.json', JSON.stringify(resultsData, null, 2));
    console.log('\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ performance-consumer-results.json');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
    if (results.processedMessages.length > 0) {
      const messagesData = {
        timestamp: new Date().toISOString(),
        messageCount: results.processedMessages.length,
        messages: results.processedMessages.slice(0, 100) // –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 100 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      };
      fs.writeFileSync('performance-messages-detail.json', JSON.stringify(messagesData, null, 2));
      console.log('üìÑ –î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ performance-messages-detail.json');
    }

  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ö–æ–¥–µ —Ç–µ—Å—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è:');
    if (error.response) {
      console.error('–°—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('–î–∞–Ω–Ω—ã–µ:', error.response.data);
    } else {
      console.error(error.message);
    }
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  runPerformanceConsumerTest();
}

module.exports = { runPerformanceConsumerTest, performance_test }; 