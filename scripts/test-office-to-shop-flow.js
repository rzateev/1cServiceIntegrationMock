require('dotenv').config();
const axios = require('axios');
const AMQPClient = require('amqp10').Client;
const amqpPolicy = require('amqp10').Policy;
const { formatAmqpUri } = require('./amqp-uri-helper');

const MOCK_API_URL = process.env.MOCK_API_URL || 'http://localhost:9090';

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞:
 * 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
 * 2. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å OfficeToShop
 * 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∑–∞–º–µ—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
 */

const test_config = {
  applicationName: 'testAppE2e',
  processName: 'testProcessE2e',
  inChannelName: 'e2eInQueue',
  outChannelName: 'e2eOutQueue',
  testMessageCount: 20 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
};

async function ensureTestEnvironment() {
  console.log('\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã ===');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const appsResponse = await axios.get(`${MOCK_API_URL}/api/applications`);
    const apps = appsResponse.data.data || [];
    let application = apps.find(app => app.name === test_config.applicationName);
    
    if (!application) {
      console.log('–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ...');
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
      const appResponse = await axios.post(`${MOCK_API_URL}/api/applications`, {
        name: test_config.applicationName,
        description: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ OfficeToShop –ø–æ—Ç–æ–∫–∞',
        clientSecret: 'demo-secret-123',
      });
      application = appResponse.data.data;
      console.log(`‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "${application.name}" —Å–æ–∑–¥–∞–Ω–æ —Å ID: ${application._id}`);
      
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
      const processResponse = await axios.post(`${MOCK_API_URL}/api/processes`, {
        name: test_config.processName,
        applicationId: application._id,
      });
      const processData = processResponse.data.data;
      console.log(`‚úÖ –ü—Ä–æ—Ü–µ—Å—Å "${processData.name}" —Å–æ–∑–¥–∞–Ω —Å ID: ${processData._id}`);
      
      // –°–æ–∑–¥–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–π –∫–∞–Ω–∞–ª (OfficeToShop)
      const outChannelResponse = await axios.post(`${MOCK_API_URL}/api/channels`, {
        name: test_config.outChannelName,
        destination: 'OfficeToShop',
        processId: processData._id,
        direction: 'outbound',
      });
      const outChannel = outChannelResponse.data.data;
      console.log(`‚úÖ –ò—Å—Ö–æ–¥—è—â–∏–π –∫–∞–Ω–∞–ª "${outChannel.name}" —Å–æ–∑–¥–∞–Ω (destination: OfficeToShop)`);
      
      // –°–æ–∑–¥–∞–µ–º –≤—Ö–æ–¥—è—â–∏–π –∫–∞–Ω–∞–ª (ShopToOffice)
      const inChannelResponse = await axios.post(`${MOCK_API_URL}/api/channels`, {
        name: test_config.inChannelName,
        destination: 'Shop',
        processId: processData._id,
        direction: 'inbound',
      });
      const inChannel = inChannelResponse.data.data;
      console.log(`‚úÖ –í—Ö–æ–¥—è—â–∏–π –∫–∞–Ω–∞–ª "${inChannel.name}" —Å–æ–∑–¥–∞–Ω (destination: Shop)`);
      
    } else {
      console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "${application.name}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    }
    
    return application;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã:', error.message);
    throw error;
  }
}

async function getAuthToken(application) {
  console.log('\n=== –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ===');
  
  const base64data = Buffer.from(`${application.name}:${application.clientSecret}`, 'utf8').toString('base64');
  const params = new URLSearchParams();
  params.append('grant_type', 'client_credentials');
  
  const tokenResponse = await axios.post(
    `${MOCK_API_URL}/auth/oidc/token`,
    params,
    {
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Authorization': 'Basic ' + base64data,
      },
    }
  );
  
  const id_token = tokenResponse.data.id_token;
  console.log('‚úÖ –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω');
  return id_token;
}

async function sendTestMessages(id_token, messageCount) {
  console.log(`\n=== –û—Ç–ø—Ä–∞–≤–∫–∞ ${messageCount} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===`);
  
  const hostname = process.env.AMQP_HOST || 'localhost';
  const port = 6698;
  
  const uri = formatAmqpUri({
    hostname,
    port,
    vhost: `/applications/${test_config.applicationName}`,
    username: id_token,
    password: id_token,
    frameMax: 1000000,
    channelMax: 7000,
    heartbeat: 6000,
    locale: 'en_EN',
  });
  
  const client = new AMQPClient(amqpPolicy.ActiveMQ);
  await client.connect(uri, { saslMechanism: 'PLAIN' });
  console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ AMQP-–±—Ä–æ–∫–µ—Ä—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
  
  const senderLink = await client.createSender('OfficeToShop', { 
    target: { address: 'OfficeToShop', capabilities: ['queue'] } 
  });
  
  const startTime = Date.now();
  
  for (let i = 1; i <= messageCount; i++) {
    const message = {
      body: JSON.stringify({
        messageId: `test-msg-${i}`,
        timestamp: new Date().toISOString(),
        content: `–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${i} –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ OfficeToShop –ø–æ—Ç–æ–∫–∞`,
        sequenceNumber: i,
        totalMessages: messageCount
      }),
      properties: {
        messageId: `test-msg-${i}`,
        timestamp: Date.now(),
        messageIndex: i
      },
      header: { 
        durable: true,
        timestamp: Date.now()
      },
    };
    
    await senderLink.send(message);
    
    if (i % 5 === 0) {
      console.log(`  üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${i}/${messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    await new Promise(resolve => setTimeout(resolve, 50));
  }
  
  const sendTime = Date.now() - startTime;
  console.log(`‚úÖ –í—Å–µ ${messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∑–∞ ${sendTime}–º—Å`);
  
  await client.disconnect();
  console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç AMQP-–±—Ä–æ–∫–µ—Ä–∞');
  
  return { messageCount, sendTime };
}

async function runCompleteTest() {
  try {
    console.log('üöÄ –ó–ê–ü–£–°–ö –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–û–ì–û –¢–ï–°–¢–ê OFFICE-TO-SHOP –ü–û–¢–û–ö–ê');
    
    // 1. –°–æ–∑–¥–∞–µ–º/–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–µ–¥—É
    const application = await ensureTestEnvironment();
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    const id_token = await getAuthToken(application);
    
    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const sendResults = await sendTestMessages(id_token, test_config.testMessageCount);
    
    console.log('\n‚è≥ –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 4. –ó–∞–ø—É—Å–∫–∞–µ–º consumer –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    console.log('\nüîÑ –ó–∞–ø—É—Å–∫ office-to-shop-consumer –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...');
    
    const { runOfficeToShopConsumerTest } = require('./office-to-shop-consumer');
    await runOfficeToShopConsumerTest();
    
    console.log('\n‚úÖ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!');
    console.log('\nüìä –°–≤–æ–¥–∫–∞ —Ç–µ—Å—Ç–∞:');
    console.log(`   üè≠ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ: ${application.name}`);
    console.log(`   üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${sendResults.messageCount}`);
    console.log(`   ‚è±Ô∏è  –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${sendResults.sendTime}–º—Å`);
    console.log(`   üîÑ –ó–∞–ø—É—â–µ–Ω consumer –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –∑–∞–º–µ—Ä–æ–≤`);
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –í –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–û–ú –¢–ï–°–¢–ï:');
    if (error.response) {
      console.error('HTTP —Å—Ç–∞—Ç—É—Å:', error.response.status);
      console.error('HTTP –¥–∞–Ω–Ω—ã–µ:', error.response.data);
    } else {
      console.error(error.message);
    }
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  runCompleteTest();
}

module.exports = { runCompleteTest, ensureTestEnvironment, sendTestMessages };